(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{40:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",function(){return s}),n.d(a,"rightToc",function(){return c}),n.d(a,"default",function(){return d});n(0);var t=n(93);function l(){return(l=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function r(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s={title:"Flutter Platform Channel 使用与源码分析",author:"yangpeng",authorTitle:"A flutter fans",authorURL:"https://github.com/77Y",authorImageURL:"https://avatars2.githubusercontent.com/u/5173695?s=460&v=4",tags:["flutter","widget"]},c=[{value:"1. 为什么要有 PlatformChannel",id:"1-为什么要有-platformchannel",children:[]},{value:"2. 架构图",id:"2-架构图",children:[]},{value:"3. PlatformChannel 类型",id:"3-platformchannel-类型",children:[]},{value:"4. PlatformChannel 使用",id:"4-platformchannel-使用",children:[]},{value:"5. 源码分析-以 MethodChannel 为例",id:"5-源码分析-以-methodchannel-为例",children:[]},{value:"Demo 地址",id:"demo-地址",children:[]},{value:"参考资源",id:"参考资源",children:[]}],i={rightToc:c},o="wrapper";function d(e){var a=e.components,n=r(e,["components"]);return Object(t.b)(o,l({},i,n,{components:a,mdxType:"MDXLayout"}),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"1-为什么要有-platformchannel"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#1-为什么要有-platformchannel"}),"#"),"1. 为什么要有 PlatformChannel"),Object(t.b)("p",null,"1、如果 Flutter 要获取设备的电量信息怎么办？",Object(t.b)("br",{parentName:"p"}),"\n","2、如果 Flutter 要实时监控网络状态怎么办？"),Object(t.b)("p",null,"由于 Flutter 特点如下："),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"Flutter is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase.")),Object(t.b)("p",null,"1、Flutter 是一个跨平台的 UI 库，专注于构建高效的 UI。",Object(t.b)("br",{parentName:"p"}),"\n","2、多平台的支持，下图是 Flutter 目前支持的平台，每个平台的都有自己的平台特性。"),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"http://p0.qhimg.com/t01b3f704dcfed0e4ab.png",alt:null}))),Object(t.b)("p",null,"基于以上两点，目前 Flutter 如果要和平台相关的部分通信需要有一个通道即 PlatformChannel。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"2-架构图"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#2-架构图"}),"#"),"2. 架构图"),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"https://flutter.dev/images/PlatformChannels.png",alt:null}))),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"3-platformchannel-类型"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#3-platformchannel-类型"}),"#"),"3. PlatformChannel 类型"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"BasicMessageChannel：用于数据传递。platform 和 dart 可互相传递数据（asynchronous message passing）"),Object(t.b)("li",{parentName:"ul"},"MethodChannel：用于传递方法调用。platform 和 dart 可互相调用方法（asynchronous method calls）"),Object(t.b)("li",{parentName:"ul"},"EventChannel：用于数据流通信。建立连接之后，platform 发送消息，dart 接收消息（event streams）")),Object(t.b)("p",null,"三种类型的 channel 都定义在 ",Object(t.b)("inlineCode",{parentName:"p"},"platform_channel.dart")," 中，从源码中可以看到三种 channel 都用到了以下三个属性。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"name"),"：String 类型，表示 channel 的名字，全局唯一（The logical channel on which communication happens）"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"codec"),"：MessageCodec 类型，消息的编码解码器（The message codec used by this channel）"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"binaryMessenger"),"：BinaryMessenger类型，用于发送数据（The messenger used by this channel to send platform messages）")),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"31-channel-name"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#31-channel-name"}),"#"),"3.1 channel name"),Object(t.b)("p",null,"channel 的名字，每个 Flutter 应用可能有多个 channel，但是每个 channel 必须有一个唯一的名字。"),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"32-codec"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#32-codec"}),"#"),"3.2 codec"),Object(t.b)("p",null,"codec 用来对数据编码解码，以便两端可以正确读取数据。\n",Object(t.b)("img",l({parentName:"p"},{src:"http://p0.qhimg.com/t01d0c790e129c2c8f9.png",alt:null}))),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"33-binarymessenger"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#33-binarymessenger"}),"#"),"3.3 binaryMessenger"),Object(t.b)("p",null,"用于发送数据"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"4-platformchannel-使用"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#4-platformchannel-使用"}),"#"),"4. PlatformChannel 使用"),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"41-methodchannel"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#41-methodchannel"}),"#"),"4.1 MethodChannel"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Dart 调用 Android 方法")),Object(t.b)("p",null,"method_channel_page.dart 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),'第一步\nstatic const methodChannel = MethodChannel("method_channel_sample");\n\n第二步  \nFuture<dynamic> getUserInfo(String method, {String userName}) async {\n  return await methodChannel.invokeMethod(method, userName);\n}\n\n第三步    \nMaterialButton(\n  color: Colors.blue,\n  textColor: Colors.white,\n  child: new Text(\'获取 snow 用户信息\'),\n  onPressed: () {\n    getUserInfo("getInfo", userName: "snow")\n      ..then((result) {\n        setState(() {\n          messageFromNative = result;\n        });\n      });\n  },\n),\n')),Object(t.b)("p",null,"MainActivity.java 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'private void addMethodChannel() {\n    mMethodChannel = new MethodChannel(getFlutterView(), "method_channel_sample");\n    mMethodChannel.setMethodCallHandler((methodCall, result) -> {\n\n        String method = methodCall.method;\n\n        if ("getInfo".equals(method)) {\n\n            String userName = (String) methodCall.arguments;\n\n            if (userName.equals("rocx")) {\n                String user = "name:rocx, age:18";\n                result.success(user);\n            } else {\n                result.success("user not found");\n\n                invokeSayHelloMethod();\n            }\n        }\n\n    });\n}\n')),Object(t.b)("p",null,"从以上代码可以看出\nDart 调用 Android 代码分三步。首先在 Dart 端定义 MethodChannel 名字为 ",Object(t.b)("inlineCode",{parentName:"p"},"method_channel_sample"),"。然后定义",Object(t.b)("inlineCode",{parentName:"p"},"getUserInfo"),"方法，传入要调用的方法名和参数。最后点击按钮执行方法，获取用户信息。\n在 Android 端定一个 MethodChannel 名字和 Dart 端保持一致。设置 MethodCallHandler。当调用的是",Object(t.b)("inlineCode",{parentName:"p"},"getInfo"),"方法时，根据参数返回信息。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Android 调用 Dart 方法")),Object(t.b)("p",null,"MainActivity.java 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'private void invokeSayHelloMethod() {\n    mMethodChannel.invokeMethod("sayHello", "", new MethodChannel.Result() {\n        @Override\n        public void success(Object o) {\n\n            Toast.makeText(MainActivity.this, o.toString(), Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void error(String s, String s1, Object o) {\n\n        }\n\n        @Override\n        public void notImplemented() {\n\n        }\n    });\n}\n')),Object(t.b)("p",null,"method_channel_page.dart 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),'Future<dynamic> addHandler(MethodCall call) async {\n  switch (call.method) {\n    case "sayHello":\n      return "Hello from Flutter";\n      break;\n  }\n}\n\n@override\nvoid initState() {\n  super.initState();\n\n  methodChannel.setMethodCallHandler(addHandler);\n}\n')),Object(t.b)("p",null,"从代码可以看出，在 Dart 端设置 MethodCallHandler 然后在 Android 端调用即可。"),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"42-basicmessagechannel"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#42-basicmessagechannel"}),"#"),"4.2 BasicMessageChannel"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Dart 向 Android 发送消息")),Object(t.b)("p",null,"basic_message_channel_page.dart 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),'第一步\nstatic const basicMessageChannel = BasicMessageChannel(\n      "basic_message_channel_sample", StandardMessageCodec());\n\n第二步\nFuture<dynamic> sayHelloToNative(String message) async {\n  String reply = await basicMessageChannel.send(message);\n\n  setState(() {\n    msgReplyFromNative = reply;\n  });\n\n  return reply;\n}\n\n第三步\nMaterialButton(\n  color: Colors.blue,\n  textColor: Colors.white,\n  child: new Text(\'say hello to native\'),\n  onPressed: () {\n    sayHelloToNative("hello");\n  },\n),\n')),Object(t.b)("p",null,"MainActivity.java 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'private void addBasicMessageChannel() {\n    mBasicMessageChannel = new BasicMessageChannel<>(getFlutterView(), "basic_message_channel_sample", StandardMessageCodec.INSTANCE);\n    mBasicMessageChannel.setMessageHandler((object, reply) -> {\n\n        reply.reply("receive " + object.toString() + " from flutter");\n\n        mBasicMessageChannel.send("native say hello to flutter");\n    });\n}\n')),Object(t.b)("p",null,"从以上代码可以看出\nDart 向 Android 发送消息依然分为三步。首先在 Dart 端定义 BasicMessageChannel 名字为 ",Object(t.b)("inlineCode",{parentName:"p"},"basic_message_channel_sample"),"。然后定义发送消息的方法",Object(t.b)("inlineCode",{parentName:"p"},"sayHelloToNative"),"。最后点击按钮向 Android 端发送消息。\n在 Android 端定一个 BasicMessageChannel 名字和 Dart 端保持一致。设置 MethodCallHandler。当收到消息时发一个回复。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Android 向 Dart 发送消息")),Object(t.b)("p",null,"MainActivity.java 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'mBasicMessageChannel.send("native say hello to flutter");\n')),Object(t.b)("p",null,"basic_message_channel_page.dart 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"Future<dynamic> addHandler(Object result) async {\n  setState(() {\n    msgReceiveFromNative = result.toString();\n  });\n}\n\nvoid addMessageListener() {\n  basicMessageChannel.setMessageHandler(addHandler);\n}\n\n@override\nvoid initState() {\n  super.initState();\n  addMessageListener();\n}\n")),Object(t.b)("p",null,"从代码可以看出，在 Dart 端设置 MessageHandler 然后在 Android 端直接发送消息即可。"),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"43-eventchannel"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#43-eventchannel"}),"#"),"4.3 EventChannel"),Object(t.b)("p",null,"event_channel_page.dart 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),'第一步\nstatic const eventChannel = EventChannel("event_channel_sample");\n\nvoid _onEvent(Object event) {\n  setState(() {\n    if (_streamSubscription != null) {\n      eventMessage = event.toString();\n    }\n  });\n}\n\nvoid _onError(Object error) {\n  setState(() {\n    if (_streamSubscription != null) {\n      eventMessage = "error";\n    }\n  });\n}\n\n@override\nvoid initState() {\n  super.initState();\n  eventMessage = "";\n  第二步\n  _streamSubscription = eventChannel\n      .receiveBroadcastStream()\n      .listen(_onEvent, onError: _onError);\n}\n')),Object(t.b)("p",null,"MainActivity.java 主要代码"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'private void addEventChannel() {\n    mEventChannel = new EventChannel(getFlutterView(), "event_channel_sample");\n    mEventChannel.setStreamHandler(new EventChannel.StreamHandler() {\n        @Override\n        public void onListen(Object o, EventChannel.EventSink eventSink) {\n\n            task = new TimerTask() {\n                @Override\n                public void run() {\n                    runOnUiThread(() -> eventSink.success("i miss you " + System.currentTimeMillis()));\n\n                }\n            };\n            timer = new Timer();\n            timer.schedule(task, 2000, 3000);\n        }\n\n        @Override\n        public void onCancel(Object o) {\n            task.cancel();\n            timer.cancel();\n            task = null;\n            timer = null;\n        }\n    });\n}\n')),Object(t.b)("p",null,"Dart 接受 Android stream event。首先在 Dart 端定义 EventChannel 名字为 ",Object(t.b)("inlineCode",{parentName:"p"},"event_channel_sample"),"。然后设置",Object(t.b)("inlineCode",{parentName:"p"},"receiveBroadcastStream"),"监听，当 Android 端有消息发过来会回调",Object(t.b)("inlineCode",{parentName:"p"},"_onEvent"),"方法。\n在 Android 端启动一个定时器，每隔3s向 Dart 端发送一次消息。"),Object(t.b)("h4",null,Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"44-总结"})),Object(t.b)("a",l({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#44-总结"}),"#"),"4.4 总结"),Object(t.b)("p",null,"如下图，在 Dart 与 Platform 通信过程中，通过 channel name 找到对方，然后把消息通过 codec 进行编解码，最后通过 binaryMessenger 进行发送。",Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("img",l({parentName:"p"},{src:"http://p0.qhimg.com/t01d23cfd7ce4e80077.png",alt:null}))),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"5-源码分析-以-methodchannel-为例"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#5-源码分析-以-methodchannel-为例"}),"#"),"5. 源码分析-以 MethodChannel 为例"),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"51-调用-methodchannel-的-invokemethod-方法，会调用到-binarymessengersend-方法。即-binarymessengersend-传入-channel-name-和编码好的参数。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#51-调用-methodchannel-的-invokemethod-方法，会调用到-binarymessengersend-方法。即-binarymessengersend-传入-channel-name-和编码好的参数。"}),"#"),"5.1 调用 MethodChannel 的 invokeMethod 方法，会调用到 binaryMessenger.send 方法。即 binaryMessenger.send 传入 channel name 和编码好的参数。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"  @optionalTypeArgs\n  Future<T> invokeMethod<T>(String method, [ dynamic arguments ]) async {\n    assert(method != null);\n    final ByteData result = await binaryMessenger.send(\n      name,\n      codec.encodeMethodCall(MethodCall(method, arguments)),\n    );\n    if (result == null) {\n      throw MissingPluginException('No implementation found for method $method on channel $name');\n    }\n    final T typedResult = codec.decodeEnvelope(result);\n    return typedResult;\n  }\n")),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"52-binary_messengerdart-的-send-方法会调用当前对象的-_sendplatformmessage-方法，最终会调用-windowsendplatformmessage-方法。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#52-binary_messengerdart-的-send-方法会调用当前对象的-_sendplatformmessage-方法，最终会调用-windowsendplatformmessage-方法。"}),"#"),"5.2 binary_messenger.dart 的 send 方法会调用当前对象的 _sendPlatformMessage 方法，最终会调用 window.sendPlatformMessage 方法。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"  @override\n  Future<ByteData> send(String channel, ByteData message) {\n    final MessageHandler handler = _mockHandlers[channel];\n    if (handler != null)\n      return handler(message);\n    return _sendPlatformMessage(channel, message);\n  }\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"  Future<ByteData> _sendPlatformMessage(String channel, ByteData message) {\n    final Completer<ByteData> completer = Completer<ByteData>();\n    // ui.window is accessed directly instead of using ServicesBinding.instance.window\n    // because this method might be invoked before any binding is initialized.\n    // This issue was reported in #27541. It is not ideal to statically access\n    // ui.window because the Window may be dependency injected elsewhere with\n    // a different instance. However, static access at this location seems to be\n    // the least bad option.\n    ui.window.sendPlatformMessage(channel, message, (ByteData reply) {\n      try {\n        completer.complete(reply);\n      } catch (exception, stack) {\n        FlutterError.reportError(FlutterErrorDetails(\n          exception: exception,\n          stack: stack,\n          library: 'services library',\n          context: ErrorDescription('during a platform message response callback'),\n        ));\n      }\n    });\n    return completer.future;\n  }\n")),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"53-在-windowdart-中又调用了-native-方法-_sendplatformmessage。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#53-在-windowdart-中又调用了-native-方法-_sendplatformmessage。"}),"#"),"5.3 在 window.dart 中又调用了 native 方法 _sendPlatformMessage。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"  void sendPlatformMessage(String name,\n                           ByteData data,\n                           PlatformMessageResponseCallback callback) {\n    final String error =\n        _sendPlatformMessage(name, _zonedPlatformMessageResponseCallback(callback), data);\n    if (error != null)\n      throw Exception(error);\n  }\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-dart"}),"  String _sendPlatformMessage(String name,\n                              PlatformMessageResponseCallback callback,\n                              ByteData data) native 'Window_sendPlatformMessage';\n")),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"54-接下来进入-engine-中的-windowcc，可以看到最终调用的是-dart_state-window-client-handleplatformmessage。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#54-接下来进入-engine-中的-windowcc，可以看到最终调用的是-dart_state-window-client-handleplatformmessage。"}),"#"),"5.4 接下来进入 engine 中的 window.cc，可以看到最终调用的是 dart_state->window()->client()->HandlePlatformMessage。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),'void Window::RegisterNatives(tonic::DartLibraryNatives* natives) {\n  natives->Register({\n      {"Window_defaultRouteName", DefaultRouteName, 1, true},\n      {"Window_scheduleFrame", ScheduleFrame, 1, true},\n      {"Window_sendPlatformMessage", _SendPlatformMessage, 4, true},\n      {"Window_respondToPlatformMessage", _RespondToPlatformMessage, 3, true},\n      {"Window_render", Render, 2, true},\n      {"Window_updateSemantics", UpdateSemantics, 2, true},\n      {"Window_setIsolateDebugName", SetIsolateDebugName, 2, true},\n      {"Window_reportUnhandledException", ReportUnhandledException, 2, true},\n      {"Window_setNeedsReportTimings", SetNeedsReportTimings, 2, true},\n  });\n}\n')),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"void _SendPlatformMessage(Dart_NativeArguments args) {\n  tonic::DartCallStatic(&SendPlatformMessage, args);\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),'Dart_Handle SendPlatformMessage(Dart_Handle window,\n                                const std::string& name,\n                                Dart_Handle callback,\n                                Dart_Handle data_handle) {\n  UIDartState* dart_state = UIDartState::Current();\n\n  if (!dart_state->window()) {\n    return tonic::ToDart(\n        "Platform messages can only be sent from the main isolate");\n  }\n\n  fml::RefPtr<PlatformMessageResponse> response;\n  if (!Dart_IsNull(callback)) {\n    response = fml::MakeRefCounted<PlatformMessageResponseDart>(\n        tonic::DartPersistentValue(dart_state, callback),\n        dart_state->GetTaskRunners().GetUITaskRunner());\n  }\n  if (Dart_IsNull(data_handle)) {\n    dart_state->window()->client()->HandlePlatformMessage(\n        fml::MakeRefCounted<PlatformMessage>(name, response));\n  } else {\n    tonic::DartByteData data(data_handle);\n    const uint8_t* buffer = static_cast<const uint8_t*>(data.data());\n    dart_state->window()->client()->HandlePlatformMessage(\n        fml::MakeRefCounted<PlatformMessage>(\n            name, std::vector<uint8_t>(buffer, buffer + data.length_in_bytes()),\n            response));\n  }\n\n  return Dart_Null();\n}\n')),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/master/lib/ui/window/window.cc"}),"window.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"55-我们进入-windowh-中找到-client-其实是-windowclient。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#55-我们进入-windowh-中找到-client-其实是-windowclient。"}),"#"),"5.5 我们进入 window.h 中找到 client 其实是 WindowClient。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"  WindowClient* client() const { return client_; }\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/master/lib/ui/window/window.h"}),"window.h 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"56-在-runtime_controllerh-中可以看到-runtimecontroller-是-windowclient-的实际实现，调用的是-runtimecontroller-的-handleplatformmessage-方法。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#56-在-runtime_controllerh-中可以看到-runtimecontroller-是-windowclient-的实际实现，调用的是-runtimecontroller-的-handleplatformmessage-方法。"}),"#"),"5.6 在 runtime_controller.h 中可以看到 RuntimeController 是 WindowClient 的实际实现，调用的是 RuntimeController 的 HandlePlatformMessage 方法。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"class RuntimeController final : public WindowClient {\n\n...\n  // |WindowClient|\n  void HandlePlatformMessage(fml::RefPtr<PlatformMessage> message) override;\n...\n}\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/78a8ca0f62b04fa49030ecdd2d91726c0639401f/runtime/runtime_controller.h"}),"runtime_controller.h 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"57-在-runtimecontrollercc-中，handleplatformmessage-调用了-client-的-handleplatformmessage-方法，client_-实际是代理对象-runtimedelegate。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#57-在-runtimecontrollercc-中，handleplatformmessage-调用了-client-的-handleplatformmessage-方法，client_-实际是代理对象-runtimedelegate。"}),"#"),"5.7 在 runtime",Object(t.b)("em",{parentName:"h5"},"controller.cc 中，HandlePlatformMessage 调用了 client")," 的 HandlePlatformMessage 方法，client_ 实际是代理对象 RuntimeDelegate。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"void RuntimeController::HandlePlatformMessage(\n    fml::RefPtr<PlatformMessage> message) {\n  client_.HandlePlatformMessage(std::move(message));\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"RuntimeDelegate& p_client\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/78a8ca0f62b04fa49030ecdd2d91726c0639401f/runtime/runtime_controller.cc"}),"runtime_controller.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"58-engineh-是-runtimedelegate-的具体实现类。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#58-engineh-是-runtimedelegate-的具体实现类。"}),"#"),"5.8 engine.h 是 RuntimeDelegate 的具体实现类。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"class Engine final : public RuntimeDelegate {\n...\n  // |RuntimeDelegate|\n  void HandlePlatformMessage(fml::RefPtr<PlatformMessage> message) override;\n...  \n}  \n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/78a8ca0f62b04fa49030ecdd2d91726c0639401f/shell/common/engine.h"}),"engine.h 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"59-enginecc-中调用了-delegate_-的-onenginehandleplatformmessage-方法。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#59-enginecc-中调用了-delegate_-的-onenginehandleplatformmessage-方法。"}),"#"),"5.9 engine.cc 中调用了 delegate_ 的 OnEngineHandlePlatformMessage 方法。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"void Engine::HandlePlatformMessage(fml::RefPtr<PlatformMessage> message) {\n  if (message->channel() == kAssetChannel) {\n    HandleAssetPlatformMessage(std::move(message));\n  } else {\n    delegate_.OnEngineHandlePlatformMessage(std::move(message));\n  }\n}\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/78a8ca0f62b04fa49030ecdd2d91726c0639401f/shell/common/engine.cc"}),"engine.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"510-shellh-是-engine-的代理。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#510-shellh-是-engine-的代理。"}),"#"),"5.10 shell.h 是 Engine 的代理。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"  // |Engine::Delegate|\n  void OnEngineHandlePlatformMessage(\n      fml::RefPtr<PlatformMessage> message) override;\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/ed8e35c4cfe12f836133944c968e00ca52593d43/shell/common/shell.h"}),"shell.h 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"511-调用流程又进入了-shellcc-的-handleengineskiamessage-方法，把消费放到-taskrunner-中。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#511-调用流程又进入了-shellcc-的-handleengineskiamessage-方法，把消费放到-taskrunner-中。"}),"#"),"5.11 调用流程又进入了 shell.cc 的 HandleEngineSkiaMessage 方法，把消费放到 TaskRunner 中。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"// |Engine::Delegate|\nvoid Shell::OnEngineHandlePlatformMessage(\n    fml::RefPtr<PlatformMessage> message) {\n  FML_DCHECK(is_setup_);\n  FML_DCHECK(task_runners_.GetUITaskRunner()->RunsTasksOnCurrentThread());\n\n  if (message->channel() == kSkiaChannel) {\n    HandleEngineSkiaMessage(std::move(message));\n    return;\n  }\n\n  task_runners_.GetPlatformTaskRunner()->PostTask(\n      [view = platform_view_->GetWeakPtr(), message = std::move(message)]() {\n        if (view) {\n          view->HandlePlatformMessage(std::move(message));\n        }\n      });\n}\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/ed8e35c4cfe12f836133944c968e00ca52593d43/shell/common/shell.cc"}),"shell.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"512-当-task-执行是会调用-platform_view_androidh-的-handleplatformmessage-方法。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#512-当-task-执行是会调用-platform_view_androidh-的-handleplatformmessage-方法。"}),"#"),"5.12 当 task 执行是会调用 platform_view_android.h 的 HandlePlatformMessage 方法。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"class PlatformViewAndroid final : public PlatformView {\n...\n  // |PlatformView|\n  void HandlePlatformMessage(\n      fml::RefPtr<flutter::PlatformMessage> message) override;\n...\n}\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/56052c70afcbdff2d39d2af279fcc52666122dbf/shell/platform/android/platform_view_android.h"}),"platform_view_android.h 源码")," ")),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"513-在-platform_view_androidcc-的-handleplatformmessage-中，开始通过-jni-调用-java-端的方法，java_channel-即要找的-channel。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#513-在-platform_view_androidcc-的-handleplatformmessage-中，开始通过-jni-调用-java-端的方法，java_channel-即要找的-channel。"}),"#"),"5.13 在 platform_view_android.cc 的 HandlePlatformMessage 中，开始通过 jni 调用 java 端的方法，java_channel 即要找的 channel。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"// |PlatformView|\nvoid PlatformViewAndroid::HandlePlatformMessage(\n    fml::RefPtr<flutter::PlatformMessage> message) {\n  JNIEnv* env = fml::jni::AttachCurrentThread();\n  fml::jni::ScopedJavaLocalRef<jobject> view = java_object_.get(env);\n  if (view.is_null())\n    return;\n\n  int response_id = 0;\n  if (auto response = message->response()) {\n    response_id = next_response_id_++;\n    pending_responses_[response_id] = response;\n  }\n  auto java_channel = fml::jni::StringToJavaString(env, message->channel());\n  if (message->hasData()) {\n    fml::jni::ScopedJavaLocalRef<jbyteArray> message_array(\n        env, env->NewByteArray(message->data().size()));\n    env->SetByteArrayRegion(\n        message_array.obj(), 0, message->data().size(),\n        reinterpret_cast<const jbyte*>(message->data().data()));\n    message = nullptr;\n\n    // This call can re-enter in InvokePlatformMessageXxxResponseCallback.\n    FlutterViewHandlePlatformMessage(env, view.obj(), java_channel.obj(),\n                                     message_array.obj(), response_id);\n  } else {\n    message = nullptr;\n\n    // This call can re-enter in InvokePlatformMessageXxxResponseCallback.\n    FlutterViewHandlePlatformMessage(env, view.obj(), java_channel.obj(),\n                                     nullptr, response_id);\n  }\n}\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/56052c70afcbdff2d39d2af279fcc52666122dbf/shell/platform/android/platform_view_android.cc"}),"platform_view_android.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"514-在-platform_view_android_jnicc-中可以看到-g_handle_platform_message_method-就是-findclassioflutterembeddingengineflutterjni-类的-handleplatformmessage-方法。至此-engine-代码执行结束。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#514-在-platform_view_android_jnicc-中可以看到-g_handle_platform_message_method-就是-findclassioflutterembeddingengineflutterjni-类的-handleplatformmessage-方法。至此-engine-代码执行结束。"}),"#"),'5.14 在 platform_view_android_jni.cc 中可以看到 g_handle_platform_message_method 就是 FindClass("io/flutter/embedding/engine/FlutterJNI") 类的 handlePlatformMessage 方法。至此 engine 代码执行结束。'),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),"static jmethodID g_handle_platform_message_method = nullptr;\nvoid FlutterViewHandlePlatformMessage(JNIEnv* env,\n                                      jobject obj,\n                                      jstring channel,\n                                      jobject message,\n                                      jint responseId) {\n  env->CallVoidMethod(obj, g_handle_platform_message_method, channel, message,\n                      responseId);\n  FML_CHECK(CheckException(env));\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),'  g_handle_platform_message_method =\n      env->GetMethodID(g_flutter_jni_class->obj(), "handlePlatformMessage",\n                       "(Ljava/lang/String;[BI)V");\n')),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-c++"}),'  g_flutter_jni_class = new fml::jni::ScopedJavaGlobalRef<jclass>(\n      env, env->FindClass("io/flutter/embedding/engine/FlutterJNI"));\n  if (g_flutter_jni_class->is_null()) {\n    FML_LOG(ERROR) << "Failed to find FlutterJNI Class.";\n    return false;\n  }\n')),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/engine/blob/ed8e35c4cfe12f836133944c968e00ca52593d43/shell/platform/android/platform_view_android_jni.cc"}),"platform_view_android_jni.cc 源码"))),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"515-在-flutterjni-中调用了-thisplatformmessagehandlerhandlemessagefromdart-方法。也就是-dartmessenger-的-handlemessagefromdart-方法。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#515-在-flutterjni-中调用了-thisplatformmessagehandlerhandlemessagefromdart-方法。也就是-dartmessenger-的-handlemessagefromdart-方法。"}),"#"),"5.15 在 FlutterJNI 中调用了 this.platformMessageHandler.handleMessageFromDart 方法。也就是 DartMessenger 的 handleMessageFromDart 方法。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),"    private void handlePlatformMessage(@NonNull String channel, byte[] message, int replyId) {\n        if (this.platformMessageHandler != null) {\n            this.platformMessageHandler.handleMessageFromDart(channel, message, replyId);\n        }\n\n    }\n")),Object(t.b)("h5",null,Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"516-dartmessenger-中-messagehandlers-通过-channel-名找到对应的-handler-进行处理，这个-handler-就是我们在-java-代码里通过-channel-设置的，整个调用流程完成。"})),Object(t.b)("a",l({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#516-dartmessenger-中-messagehandlers-通过-channel-名找到对应的-handler-进行处理，这个-handler-就是我们在-java-代码里通过-channel-设置的，整个调用流程完成。"}),"#"),"5.16 DartMessenger 中 messageHandlers 通过 channel 名找到对应的 handler 进行处理，这个 handler 就是我们在 java 代码里通过 channel 设置的，整个调用流程完成。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-java"}),'    public void handleMessageFromDart(@NonNull String channel, @Nullable byte[] message, int replyId) {\n        Log.v("DartMessenger", "Received message from Dart over channel \'" + channel + "\'");\n        BinaryMessageHandler handler = (BinaryMessageHandler)this.messageHandlers.get(channel);\n        if (handler != null) {\n            try {\n                Log.v("DartMessenger", "Deferring to registered handler to process message.");\n                ByteBuffer buffer = message == null ? null : ByteBuffer.wrap(message);\n                handler.onMessage(buffer, new DartMessenger.Reply(this.flutterJNI, replyId));\n            } catch (Exception var6) {\n                Log.e("DartMessenger", "Uncaught exception in binary message listener", var6);\n                this.flutterJNI.invokePlatformMessageEmptyResponseCallback(replyId);\n            }\n        } else {\n            Log.v("DartMessenger", "No registered handler for message. Responding to Dart with empty reply message.");\n            this.flutterJNI.invokePlatformMessageEmptyResponseCallback(replyId);\n        }\n\n    }\n')),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"demo-地址"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#demo-地址"}),"#"),"Demo 地址"),Object(t.b)("p",null,Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/roc-x/roc-samples/tree/master/flutter_platform_channel"}),"flutter_platform_channel 使用")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"参考资源"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#参考资源"}),"#"),"参考资源"),Object(t.b)("p",null,Object(t.b)("a",l({parentName:"p"},{href:"https://flutter.dev/docs/development/platform-integration/platform-channels"}),"Writing custom platform-specific code"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",l({parentName:"p"},{href:"https://github.com/flutter/flutter/tree/master/examples/platform_channel"}),"platform channel 官方示例"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",l({parentName:"p"},{href:"https://www.yuque.com/xytech/flutter/fu7h25"}),"深入理解Flutter Platform Channel")))}d.isMDXComponent=!0}}]);