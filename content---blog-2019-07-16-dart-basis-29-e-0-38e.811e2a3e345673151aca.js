(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{43:function(n,e,a){"use strict";a.r(e),a.d(e,"frontMatter",function(){return l}),a.d(e,"rightToc",function(){return b}),a.d(e,"default",function(){return c});a(0);var t=a(76);function r(){return(r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n}).apply(this,arguments)}function i(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},i=Object.keys(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var l={title:"Dart 基础二",author:"wangyongwang",authorURL:"https://juejin.im/user/59151f3a8d6d8100585b68ce",authorTitle:"A flutter fans",authorImageURL:"https://p5.ssl.qhimg.com/t01b6580ec3d65d7b7f.png",tags:["dart","basic"]},b=[{value:"Functions（方法）",id:"functions（方法）",children:[]}],s={rightToc:b},p="wrapper";function c(n){var e=n.components,a=i(n,["components"]);return Object(t.b)(p,r({},s,a,{components:e,mdxType:"MDXLayout"}),Object(t.b)("p",null,"前言："),Object(t.b)("p",null,"接着上篇文章：",Object(t.b)("a",r({parentName:"p"},{href:"/blog/2019/07/16/dart-basis-1"}),"Dart基础（一）"),"  "),Object(t.b)("p",null,"我们最后聊到了方法相关的内容，在本篇文章中，笔者仍然以方法开头。"),Object(t.b)("h3",null,Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"functions（方法）"})),Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#functions（方法）"}),"#"),"Functions（方法）"),Object(t.b)("p",null,"下边笔者写了一段代码：定义了返回值为bool类型，参数为整数，判断传入参数是否是奇数的方法。如果是奇数输出true，并且返回ture。否则输出false，返回false。并且分别传入参数1，2，3，4调用这个奇数方法 。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  isOdd(1);\n  isOdd(2);\n  isOdd(3);\n  isOdd(4);\n  \n}\n\nbool isOdd(int num) {\n  if (num % 2 == 0) {\n    print('false');\n    return false;\n  }\n  print('true');\n  return true;\n}\n\n/* 输出结果\ntrue\nfalse\ntrue\nfalse\n*/\n")),Object(t.b)("p",null,"下边笔者重写写了一下返回值为bool类型，参数为int 类型，判断参数是否为奇数的方法。如果传入参数是奇数，则返回ture，否则返回false。 与上边的方法的不同之处在于，这里，方法体部分只有",Object(t.b)("inlineCode",{parentName:"p"},"=>"),"及一行代码。\n",Object(t.b)("inlineCode",{parentName:"p"},"=> expr")," 语法是 ",Object(t.b)("inlineCode",{parentName:"p"},"{ return expr; }"),"形式的缩写。",Object(t.b)("inlineCode",{parentName:"p"},"=>")," 形式 有时候也称之为 ",Object(t.b)("inlineCode",{parentName:"p"},"胖箭头")," 语法。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{}),"void main() {\n  \n  bool flag = isOdd(1);\n  print(flag);\n  \n  flag = isOdd(2);\n  print(flag);\n  \n  flag = isOdd(3);\n  print(flag);\n  \n  flag = isOdd(4);\n  print(flag);\n  \n}\n\nbool isOdd(int num) => (num % 2 != 0);\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"可选参数"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#可选参数"}),"#"),"可选参数"),Object(t.b)("p",null,"分为两种："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},Object(t.b)("p",{parentName:"li"},"可选命名参数；"),Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"默认参数值，可以在定义函数的时候，指定默认参数值。"))),Object(t.b)("li",{parentName:"ol"},Object(t.b)("p",{parentName:"li"},"可选位置参数：可以选择性传入某位置的参数。"))),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"这里，笔者举一个QiShare可选说出姓名，年龄 的示例"),"\n可以选择性传入姓名和年龄参数。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"1. 可选命名参数：{params1,param2}")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"在定义方法的时候，使用",Object(t.b)("inlineCode",{parentName:"p"},"{param1, param2, …}")," 的形式来指定命名参数：\n调用方法的时候，可以使用这种形式 paramName: value 来指定命名参数。")),Object(t.b)("p",null,"下边笔者写了一个返回值为空 可选位置参数为name，age，名为qiSay的方法。并且可选地传入了参数调用了qiSay方法。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  qiSay(name: 'QiShare', age: 1);\n  print('\\n');\n  \n  qiSay(name: 'QiShare');\n  print('\\n');\n  \n  qiSay( age: 1);\n}\n\nvoid qiSay({String name, int age}) {\n  print('name:$name');\n  print('age:$age');\n}\n\n\n\n/* 输出结果：\nname:QiShare\nage:1\n\n\nname:QiShare\nage:null\n\n\nname:null\nage:1\n\n*/\n")),Object(t.b)("p",null,"可以发现上例，不指定名字和年龄参数的情况下，输出的参数为null。那如果我们想要给方法参数默认值的话，需要考虑使用如下定义方法的方式。（在参数部分指定name默认值为'QiShare'。）"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"指定默认参数值{param:paramValue默认值}"))),Object(t.b)("p",null,"下边笔者写了一个",Object(t.b)("inlineCode",{parentName:"p"},"返回值为空 可选位置参数为name，age，并且制定name 默认值为QiShare的名为qiSay"),"的方法。并且",Object(t.b)("inlineCode",{parentName:"p"},"可选地传入了参数调用了qiSay"),"方法。在",Object(t.b)("inlineCode",{parentName:"p"},"qiSay(age:1)"),"的输出结果可以发现",Object(t.b)("inlineCode",{parentName:"p"},"即使不传入可选位置参数name"),"，",Object(t.b)("inlineCode",{parentName:"p"},"输出结果中也有name的默认值QiShare"),"。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  qiSay(name: 'QiShare', age: 1);\n  print('\\n');\n  \n  qiSay(name: 'QiShare');\n  print('\\n');\n  \n  qiSay( age: 1);\n}\n\nvoid qiSay({String name = 'QiShare', int age}) {\n  print('name:$name');\n  print('age:$age');\n}\n\n/* 输出结果：\nname:QiShare\nage:1\n\n\nname:QiShare\nage:null\n\n\nname:QiShare\nage:1\n*/\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"2. 可选位置参数：","[param]")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"把一些方法的参数放到 ",Object(t.b)("inlineCode",{parentName:"p"},"[]")," 中就变成可选 位置参数了。可选位置参数的意思是，该位置的参数可以传入，也可以不传入。像如下代码，可以传入address 值，也可以不传入address值。")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"这里，笔者举一个QiShare说出姓名，年龄，可选择说出住址 的示例")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 可选位置参数 地址参数为可选位置参数\n\nvoid main() {\n  \n  qiSay('QiShare', 1, '北京');\n  print('\\n\\n');\n  qiSay('QiShare', 1);\n}\n\nvoid qiSay(String name, int age, [String address]) {\n  \n  if (name != null) {\n    print('name: $name');\n  }\n  \n  if (age != null) {\n    print('age: $age');\n  }\n  \n  if (address != null) {\n    print('address：$address');\n  } \n}\n\n/* 输出结果：\nname: QiShare\nage: 1\naddress：北京\n*/\n")),Object(t.b)("p",null,"如果我们想指定qiSay方法可选位置参数address的默认值为'BeiJing'可以通过如下方式。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"指定默认参数值","[param=paramsValue默认值]"))),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  qiSay('QiShare', 1, '北京');\n  print('\\n\\n');\n  qiSay('QiShare', 1);\n}\n\nvoid qiSay(String name, int age, [String address = 'BeiJing']) {\n  \n  if (name != null) {\n    print('name: $name');\n  }\n  \n  if (age != null) {\n    print('age: $age');\n  }\n  \n  if (address != null) {\n    print('address：$address');\n  } \n}\n\n\n/** 输出结果：\nname: QiShare\nage: 1\naddress：北京\n\n\n\nname: QiShare\nage: 1\naddress：BeiJing\n*/\n")),Object(t.b)("p",null,"还可以使用 list 或者 map 作为默认值。 下面的示例定义了一个方法 doStuff()， 并分别为 list 和 gifts 参数指定了 默认值。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  doStuff();\n}\n\nvoid doStuff(\n    {List<int> list = const [1, 2, 3],\n    Map<String, String> gifts = const {\n      'first': 'paper',\n      'second': 'cotton',\n      'third': 'leather'\n    }}) {\n  print('list:  $list');\n  print('gifts: $gifts');\n}\n\n/**\n输出结果：\n\nlist:  [1, 2, 3]\ngifts: {first: paper, second: cotton, third: leather}\n\n*/\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"一等方法对象"))),Object(t.b)("p",null,"可以定义一个参数为方法的方法A\n然后可以把方法B 当做参数传递给方法A。"),Object(t.b)("p",null,"如List 的遍历方法",Object(t.b)("inlineCode",{parentName:"p"},"forEach"),"，接收的参数就是方法",Object(t.b)("inlineCode",{parentName:"p"},"void f(E element){}")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void forEach(void f(E element)) {\n   for (E element in this) \n       f(element);\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  var list = [1, 2, 3];\n\n    // Pass printElement as a parameter.\n    list.forEach(printElement);\n}\n\nvoid printElement(element) {\n  print(element);\n}\n\n/*\n输出结果：\n1\n2\n3\n*/\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"使用场景：一等方法对象适用于需要在外部方法内部调用多次但是不能在外部方法外部调用。\n以上述代码为例，printElement 为一等方法对象，外部方法为forEach。printElement需要在forEach 内部中调用多次，但是不能再forEach外调用。")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),'// 友好性：\n[mArticles enumerateObjectsUsingBlock:^(WTArticle * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSLog(@"%@", obj);\n}];\n')),Object(t.b)("p",null,"在友好性方面考虑的话，用Dart和 如上Objective-C的遍历对比。笔者自己感觉Objective-C的代码更加友好，直接在block 中有相应的当前遍历对象obj，及索引index，及控制是否停止的stop参数。"),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"如果条件表达式结果不满足需要，则可以使用 assert 语句俩打断代码的执行。")),Object(t.b)("p",null,"那么或许我们可以使用断言打断程序运行的方法，通过判断当前遍历的对象是否符合要求，使用断言决定是否要终止代码执行。\n如"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"assert(obj != null);\n")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"assert 方法的参数可以为任何返回布尔值的表达式或者方法。 如果返回的值为 true， 断言执行通过，执行结束。 如果返回值为 false， 断言执行失败，会抛出一个异常 AssertionError)。"),Object(t.b)("p",{parentName:"blockquote"},"断言只在检查模式下运行有效，如果在生产模式 运行，则断言不会执行。")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"对于只有一个表达式的方法，可以选择使用缩写语法定义。")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"这个 ",Object(t.b)("inlineCode",{parentName:"p"},"=> expr 语法是 { return expr; }")," 形式的缩写。",Object(t.b)("inlineCode",{parentName:"p"},"=> 形式"),"有时候也称之为 ",Object(t.b)("inlineCode",{parentName:"p"},"胖箭头 语法"),"。")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  \n  bool flag = isOdd(1);\n  print(flag);\n  \n  flag = isOdd(2);\n  print(flag);\n  \n  flag = isOdd(3);\n  print(flag);\n  \n  flag = isOdd(4);\n  print(flag);\n  \n}\n\nbool isOdd(int num) => (num % 2 != 0);\n\n/**\n输出结果：\n\ntrue\nfalse\ntrue\nfalse\n*/\n")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"void main() {\n  var loudify = (msg) => 'Hello ${msg.toUpperCase()} !!!';\n  print(loudify('QiShare'));\n}\n\n// 输出结果：\n// Hello QISHARE !!!\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"匿名方法")),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"大部分方法都带有名字，例如 main() 或者 printElement()。 我们还可以创建没有名字的方法，称之为 匿名方法，有时候也被称为 lambda 或者 closure 闭包。 我们可以把匿名方法赋值给一个变量， 然后可以通过使用变量调用方法，比如遍历List 中的数据。"),Object(t.b)("p",{parentName:"blockquote"},"匿名函数和命名函数看起来类似— 在括号之间可以定义一些参数，参数使用逗号 分割，也可以是可选参数。 后面大括号中的代码为函数体：")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"([[Type] param1[, …]]) { \n  codeBlock; \n}; \n")),Object(t.b)("p",null,"下边我们看一段 foreach 遍历的list，并且输出对应的obj的索引的有意思的代码。直接使用indexOf (obj)的方式可以发现，当输出第二个apples的索引的时候，发现输出的index结果仍为0；\n笔者看了indexOf的方法声明后才发现，原来indexOf有一个可选位置参数start，并且默认值为0；\n所以如果我们想要在遍历list 的时候获取到准确地索引，可以记录遍历过的次数，并且给start参数 传入相应的值。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"int indexOf(E element, [int start = 0]);\n")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  var list = ['apples', 'oranges', 'apples', 'grapes', 'bananas', 'plums'];\n  list.forEach((obj){\n    print('当前遍历项： $obj');\n    print('当前遍历项索引： ${list.indexOf(obj).toString()}');\n    \n  });\n  \n  print('');\n  print('');\n  \n  int count = 0;\n  list.forEach((obj){\n    print('当前遍历项： $obj');\n    print('当前遍历项索引： ${list.indexOf(obj,count).toString()}');\n    print('当前遍历项索引Count： $count');\n    ++count;\n    \n    \n  });\n  \n  print('第二个apples 索引：');\n  print(list.indexOf('apples', 1));\n  \n  /**\n  输出结果：\n  \n  当前遍历项： apples\n当前遍历项索引： 0\n当前遍历项： oranges\n当前遍历项索引： 1\n当前遍历项： apples\n当前遍历项索引： 0\n当前遍历项： grapes\n当前遍历项索引： 3\n当前遍历项： bananas\n当前遍历项索引： 4\n当前遍历项： plums\n当前遍历项索引： 5\n\n\n当前遍历项： apples\n当前遍历项索引： 0\n当前遍历项索引Count： 0\n当前遍历项： oranges\n当前遍历项索引： 1\n当前遍历项索引Count： 1\n当前遍历项： apples\n当前遍历项索引： 2\n当前遍历项索引Count： 2\n当前遍历项： grapes\n当前遍历项索引： 3\n当前遍历项索引Count： 3\n当前遍历项： bananas\n当前遍历项索引： 4\n当前遍历项索引Count： 4\n当前遍历项： plums\n当前遍历项索引： 5\n当前遍历项索引Count： 5\n第二个apples 索引：\n2\n\n  \n  */\n  \nvoid forEach(void f(E element)) {\n   for (E element in this) f(element);\n}\n```js\n list.forEach(`\n(obj){\n    print('当前遍历项： $obj'); \n    print('当前遍历项索引： ${list.indexOf(obj).toString()}');\n      }`);\n上述代码红色部分即为`匿名函数`，就是一个没有名字的函数。\n\n* **Lexical scope（静态作用域)**\n\n> Dart 是静态作用域语言，变量的作用域在写代码的时候就确定过了。 大括号里面定义的变量就 只能在大括号里面访问，和 Java 作用域 类似。\n\n```js\nvoid main() {\n  debugPaintSizeEnabled = false;\n  runApp(WebTech());\n\n  var insideMain = true;\n\n  myFunction() {\n    var insideFunction = true;\n    print('insideFunction: $insideFunction');\n    \n    nestedFunction() {\n      var insideNestedFunction = true;\n\n      assert(topLevel);\n      assert(insideMain);\n      assert(insideFunction);\n      assert(insideNestedFunction);\n      print('topLevel: $topLevel');\n      print('insideMain: $insideMain');\n      print('insideFunction: $insideFunction');\n      print('insideNestedFunction: $insideNestedFunction');\n    }\n    nestedFunction();\n\n    print('insideFunction:$insideFunction');\n\n  }\n  myFunction();\n\n}\n\n注意 nestedFunction() 可以访问所有的变量， 包含顶级变量。\n\n/**\n输出结果：\nflutter: insideFunction: true                                           \nflutter: topLevel: true                                                 \nflutter: insideMain: true                                               \nflutter: insideFunction: true                                           \nflutter: insideNestedFunction: true                                     \nflutter: insideFunction:true  \n*/\n")),Object(t.b)("p",null,"假如说在QiShare1.dart 文件中定义了变量topLevel，那么在QiShare1.dart类文件中任何地方都可以访问。"),Object(t.b)("p",null,"对于QiShare2.dart，如果import了QiShare1.dart。那么QiShare2.dart中topLevel也是可见的。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Lexical closures（词法闭包）"))),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"一个 闭包 是一个方法对象，不管该对象在何处被调用， 该对象都可以访问其作用域内 的变量。"),Object(t.b)("p",{parentName:"blockquote"},"方法可以封闭定义到其作用域内的变量。 下面的示例中，makeAdder() 捕获到了变量 addBy。 不管你在哪里执行 makeAdder() 所返回的函数，都可以使用 addBy 参数。")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"/// Returns a function that adds [addBy] to the\n/// function's argument.\nFunction makeAdder(num addBy) {\n  return (num i) => addBy + i;\n}\n\nmain() {\n  // Create a function that adds 2.\n  var add2 = makeAdder(2);\n\n  // Create a function that adds 4.\n  var add4 = makeAdder(4);\n\n  assert(add2(3) == 5);\n  assert(add4(3) == 7);\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"Function makeAdder(num addBy) {\n  return (num i) => addBy + i;\n}\n\n相当于\nFunction makeAdder(num addBy) {\n  return num f(num i) { \n    return addBy + i;\n}\n}\n\nadd2 = makeAdder(2);\nadd2(3) = f(3) + 2;\nadd2(3)= 5;\n\n同理：\nadd3(3) = 7;\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"testing-functions-for-equality（测试函数是否相等）"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#testing-functions-for-equality（测试函数是否相等）"}),"#"),"Testing functions for equality（测试函数是否相等）"),Object(t.b)("p",null,"下面是测试顶级方法、静态函数和实例函数 相等的示例："),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"foo() {}               // A top-level function\n\nclass A {\n  static void bar() {} // A static method\n  void baz() {}        // An instance method\n}\n\nmain() {\n  var x;\n\n  // Comparing top-level functions.\n  x = foo;\n  assert(foo == x);\n\n  // Comparing static methods.\n  x = A.bar;\n  assert(A.bar == x);\n\n  // Comparing instance methods.\n  var v = new A(); // Instance #1 of A\n  var w = new A(); // Instance #2 of A\n  var y = w;\n  x = w.baz;\n\n  // These closures refer to the same instance (#2),\n  // so they're equal.\n  assert(y.baz == x);\n\n  // These closures refer to different instances,\n  // so they're unequal.\n  assert(v.baz != w.baz);\n}\n")),Object(t.b)("p",null,"笔者还没有遇到测试函数的应用场景。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Return values（返回值）"))),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"所有的函数都返回一个值。如果没有指定返回值，则 默认把语句 return null; 作为函数的最后一个语句执行。")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"参考学习资料"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#参考学习资料"}),"#"),"参考学习资料"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",r({parentName:"li"},{href:"http://dart.goodev.org/guides/language/language-tour"}),"Dart 语法预览")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",r({parentName:"li"},{href:"https://dartpad.dartlang.org"}),"DartPad")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",r({parentName:"li"},{href:"https://zh.wikipedia.org/wiki/Dart"}),"Dart"))))}c.isMDXComponent=!0}}]);