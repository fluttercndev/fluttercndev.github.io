(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{49:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return o}),t.d(n,"default",function(){return p});t(0);var a=t(90);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i={title:"Dart 基础四",author:"wangyongwang",authorURL:"https://juejin.im/user/59151f3a8d6d8100585b68ce",authorTitle:"A flutter fans",authorImageURL:"https://p5.ssl.qhimg.com/t01b6580ec3d65d7b7f.png",tags:["dart","basic"]},o=[],c={rightToc:o},b="wrapper";function p(e){var n=e.components,t=l(e,["components"]);return Object(a.b)(b,r({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"前言：",Object(a.b)("br",{parentName:"p"}),"\n","笔者在之前已经写了3篇Dart的基础文章了。 "),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("a",r({parentName:"p"},{href:"/blog/2019/07/13/dart-basis-1"}),"Dart 基础 （一）"),Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",r({parentName:"p"},{href:"/blog/2019/07/14/dart-basis-2"}),"Dart 基础 （二）"),Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",r({parentName:"p"},{href:"/blog/2019/07/15/dart-basis-3"}),"Dart 基础 （三）"))),Object(a.b)("p",null,"笔者在本文中主要会分享：类、实例变量、构造方法、命名构造方法、实例方法、静态变量、静态方法、set、get 方法、",Object(a.b)("inlineCode",{parentName:"p"},"extends"),"、",Object(a.b)("inlineCode",{parentName:"p"},"implements"),"、",Object(a.b)("inlineCode",{parentName:"p"},"mixin"),"、",Object(a.b)("inlineCode",{parentName:"p"},"abstract"),"、",Object(a.b)("inlineCode",{parentName:"p"},"override"),"相关的内容。"),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"1类"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#1类"}),"#"),"1.类"),Object(a.b)("p",null,"下边笔者先以Point 类为例，分享下关于",Object(a.b)("inlineCode",{parentName:"p"},"实例变量"),"，",Object(a.b)("inlineCode",{parentName:"p"},"构造方法"),"，",Object(a.b)("inlineCode",{parentName:"p"},"命名构造方法"),"，",Object(a.b)("inlineCode",{parentName:"p"},"实例方法"),"、",Object(a.b)("inlineCode",{parentName:"p"},"静态方法"),"、 ",Object(a.b)("inlineCode",{parentName:"p"},"静态变量")," 、",Object(a.b)("inlineCode",{parentName:"p"},"set get方法")," 的内容。"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Dart 是一种面向对象的编程语言，同时支持基于 mixin 的继承机制。mixin相关的内容会在下文解释。每个对象都是一个类的实例，所有的类都继承于 Object。 基于 Mixin 的继承 意味着每个类（Object 除外） 都只有一个超类，一个类的代码可以在其他 多个类继承中重复使用。"),Object(a.b)("p",{parentName:"blockquote"},"使用 new 关键字和构造方法来创建新的对象。 构造方法名字可以为 ClassName 或者 ClassName.identifier。\n在Dart2.0的时候，创建新的对象的时候，new 关键字是可选的。当前Dart最新版本是2.4.0，2019-06-27 Dart开发团队发布2.4.0版本Dart。 ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md"}),"Dart change log"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.1 实例变量")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"class Point {\n  \n  // 实例变量\n  num x;\n  num y;\n}\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.2 构造方法：构造方法 定义一个和类名一样的方法")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"})," // 构造方法 定义一个和类名一样的方法\n  Point(num x, num y) {\n    // this 关键字指当前的实例\n    this.x = x;\n    this.y = y;\n  }\n  \n  // 由于把构造方法参数赋值给实例变量的场景太常见了， Dart 提供了一个语法糖来简化这个操作\n  // Point(this.x, this.y);\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.3 命名构造方法")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"})," // 命名构造方法\n  Point.fromJson(Map json) {\n    // 只有当名字冲突的时候才使用 this。否则的话， Dart 代码风格样式推荐忽略 this。\n    x = json['x'];\n    y = json['y'];\n  }\n\n  Point.namedConstructor(Map json){\n    x = json['x'];\n    y = json['y'];\n  }\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"命名构造方法使用场景有：模型类中解析数据场景。")),Object(a.b)("p",null,"举个简单例子：如返回一个列表数据的情况，返回数据可能是是一个包着多个字典的数组，那么，处理相应数据的时候，需要对数据进行相应的解析。解析的过程就可能用到命名构造方法。把一个个字典当做实例，提取出来。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'[\n    {\n        "name":"QiShare1",\n        "age":"1"\n    },\n    {\n        "name":"QiShare2",\n        "age":"1"\n    },\n    {\n        "name":"QiShare3",\n        "age":"1"\n    },\n    {\n        "name":"QiShare4",\n        "age":"1"\n    },\n    {\n        "name":"QiShare5",\n        "age":"1"\n    },\n    {\n        "name":"QiShare6",\n        "age":"1"\n    },\n    {\n        "name":"QiShare7",\n        "age":"1"\n    },\n]\n')),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.4 实例方法")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 实例方法\n  num distanceTo(Point other) {\n    var dx = x - other.x;\n    var dy = y - other.y;\n    return sqrt(dx*dx + dy*dy);\n  }\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.5 静态方法")," "),Object(a.b)("p",null,"使用static关键字修饰的方法为静态方法，相当于类方法。使用类名可以直接调用。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 静态方法\n  static num distanceBetween(Point a, Point b) {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    return sqrt(dx * dx + dy * dy);\n  }\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"void classDemo() {\n\n    var jsonData = jsonDecode('{\"x\":2, \"y\":2}');\n    // Create a Point using Point().\n    var p1 = new Point(1, 1);\n    print('p1点x坐标：${p1.x}');\n    print('p1点y坐标：${p1.y}');\n\n    // Create a Point using Point.fromJson().\n    var p2 = new Point.fromJson(jsonData);\n    print('p2点x坐标：${p2.x}');\n    print('p2点y坐标：${p2.y}');\n\n    num distance = p2.distanceTo(p1);\n    print('p1到p2的距离: $distance');\n\n    Map jsonData3 = {\n      'x': 3,\n      'y': 3,\n    };\n\n    Point p3 = Point.namedConstructor(jsonData3);\n    print('p3点x坐标：${p3.x}');\n    print('p3点y坐标：${p3.y}');\n    \n    num distance12 = Point.distanceBetween(p1, p2);\n    print('p1和p2之间的距离 $distance12');\n    \n    }\n    \n")),Object(a.b)("p",null,"输出内容"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"flutter: p1点x坐标：1\nflutter: p1点y坐标：1\nflutter: p2点x坐标：2\nflutter: p2点y坐标：2\nflutter: p1到p2的距离: 1.4142135623730951\nflutter: p3点x坐标：3\nflutter: p3点y坐标：3\nflutter: p1和p2之间的距离 1.4142135623730951\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.6 静态变量")),Object(a.b)("p",null,"静态变量对于类级别的状态是非常有用的，笔者对这句话的理解是：静态变量可以由类名直接调用。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"class Color {\n  static const red =\n      const Color('red'); // A constant static variable.\n  final String name;      // An instance variable.\n  const Color(this.name); // A constant constructor.\n}\n")),Object(a.b)("p",null,"使用方式"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"    String colorName = Color.red.name;\n    print('colorName：$colorName');\n")),Object(a.b)("p",null,"输出内容"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"colorName：red\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"1.7 set get 方法")),Object(a.b)("p",null,"下边笔者举了一个类Rectangle的left、top、width、height的Set、Get方法的例子。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"class Rectangle {\n  num left;\n  num top;\n  num width;\n  num height;\n\n  Rectangle(this.left, this.top, this.width, this.height);\n\n  // Define two calculated properties: right and bottom.\n  num get right             => left + width;\n      set right(num value)  => left = value - width;\n  num get bottom            => top + height;\n      set bottom(num value) => top = value - height;\n}\n")),Object(a.b)("p",null,"使用方式"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"Rectangle rectangel = Rectangle(0, 0, 375, 667);\n    print('rectangel.left:');\n    print(rectangel.left);\n    print('rectangel.right:');\n    print(rectangel.right);\n    print('rectangel.width:');\n    print(rectangel.width);\n    print('rectangel.height:');\n    print(rectangel.height);\n    print('rectangel.right:');\n    print(rectangel.right);\n    print('rectangel.bottom:');\n    print(rectangel.bottom);\n")),Object(a.b)("p",null,"输出结果："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"flutter: rectangel.left:\nflutter: 0\nflutter: rectangel.right:\nflutter: 375\nflutter: rectangel.width:\nflutter: 375\nflutter: rectangel.height:\nflutter: 667\nflutter: rectangel.right:\nflutter: 375\nflutter: rectangel.bottom:\nflutter: 667\n")),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"2-extends-与-implements"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#2-extends-与-implements"}),"#"),"2. extends 与 implements"),Object(a.b)("p",null,"extends"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"关键字extends 用于继承父类的实例变量及方法等。Dart 只支持单继承。")),Object(a.b)("p",null,"implements"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Every class implicitly defines an interface containing all the instance members of the class and of any interfaces it implements. If you want to create a class A that supports class B’s API without inheriting B’s implementation, class A should implement the B interface."),Object(a.b)("p",{parentName:"blockquote"},"每个类都隐式地声明了一个包含所有的实例变量和类已经实现的接口。\n如果你想创建一个类A，没有继承类B，但是类A可访问类B的API，那么类A 应该实现类B的接口。\n上边的内容，结合着下边的例子，笔者的理解是：Chicken隐式地声明了Animal 的实例变量，和类Animal 已经实现的方法。Chicken支持在没有继承类Animal的情况下，可访问类B的API。\n一个类可以implements 多个类的API，所以implements算是一种变向实现多继承的方式。")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"class Animal {\n  String name;\n  void ability() {\n    print('Animal 的能力');\n  }\n}\n\nclass Bird extends Animal {\n  void ability(){\n    print('bird can fly');\n  }\n}\n\nclass Fish extends Animal {\n  void ability(){\n    print('fish can swim');\n  }\n}\n\nclass Dog extends Animal {\n  void ability(){\n    print('dog can bark');\n  }\n}\n\nclass Chicken implements Animal {\n  String name;\n  void ability() {\n    print('chicken can lay eggs');\n  }\n}\n")),Object(a.b)("p",null,"调用如上代码的方式及相应输出结果如下："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"    Dog dog = Dog();\n    dog.ability();\n    Fish fish = Fish();\n    fish.ability();\n    Bird bird = Bird();\n    bird.ability();\n    Chicken chicken = Chicken();\n    chicken.ability();\n    \n    \n\n// 输出结果：\nflutter: dog can bark\nflutter: fish can swim\nflutter: bird can fly\nflutter: chicken can lay eggs\n")),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"3-mixin"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#3-mixin"}),"#"),"3. mixin"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Mixins 是一种在多类继承中重用一个类代码的方法。笔者的理解是，mixin相当于是一个工具类，使用 ",Object(a.b)("inlineCode",{parentName:"p"},"with")," 关键字使用了mixin的类，就可以使用mixin中的代码。"),Object(a.b)("p",{parentName:"blockquote"},"Mixins are a way of reusing a class’s code in multiple class hierarchies."),Object(a.b)("p",{parentName:"blockquote"},"To use a mixin, use the with keyword followed by one or more mixin names. The following example shows two classes that use mixins:"),Object(a.b)("p",{parentName:"blockquote"},"Mixin 是一种在多个类中重用某些代码的方式。\n使用mixin ,需使用 ",Object(a.b)("inlineCode",{parentName:"p"},"with")," 关键字，with后边跟mixin的名，with 后边可以跟多个mixin名字，及可以同时使用多个mixin中的代码。下边笔者举了一个开发者学习基础语言的例子。"),Object(a.b)("p",{parentName:"blockquote"},"笔者定义了一个Developer的mixin，如果是iOS 开发者需要先学习C语言基础，如果是Android 开发者，需要先学习Java语言，如果是Flutter 开发者，需要先学习Dart 语言。")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"mixin Developer {\n    bool isIOS = false;\n    bool isAndroid = false;\n    bool isFlutter = false;\n    \n    // 需要学习的基础语言\n    void needLearnBaseProgram () {\n      if (isIOS) {\n        print('Need Learn C Firstly');\n      } else if (isAndroid) {\n        print('Need Learn Java Firstly');\n      } else if (isFlutter) {\n        print('Need Learn Dart Firstly');\n      } else {\n        print('May be need Learn Other Language');\n      }\n    }\n    \n  }\n\nclass FlutterDeveloper with Developer {\n    String name;\n    FlutterDeveloper(String name) {\n        isFlutter = true;\n        this.name = name;\n    }\n}\n  \n")),Object(a.b)("p",null,"使用的相关代码："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"    FlutterDeveloper flutterDeveloper = FlutterDeveloper('FlutterEnginerName');\n    flutterDeveloper.needLearnBaseProgram();\n    \n    // 输出结果： flutter: Need Learn Dart Firstly\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"注意事项：")," 当在if else 场景下使用 bool 类型变量的时候，需要注意bool变量是否赋值过了，否则会有类似如下的异常信息。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"flutter: The following assertion was thrown while handling a gesture:\nflutter: Failed assertion: boolean expression must not be null\n")),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"4-abstract"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#4-abstract"}),"#"),"4. abstract"),Object(a.b)("p",null,"使用 abstract 修饰的类 记为抽象类。抽象类用于定义接口 及部分实现。"),Object(a.b)("p",null,"笔者举了如下例子："),Object(a.b)("p",null,"创建了People 类，并且声明了  String skinColor();的抽象方法，创建并实现了  void ability() 方法；"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"abstract class People {\n  String skinColor();\n  void ability() {\n    print('All can Communicate');\n  }\n\n}\n\nclass YellowPeople extends People {\n  @override\n  String skinColor() {\n    String color = 'Yellow';\n    print(color);\n    return color;\n  }\n}\n\nclass BlackPeople extends People {\n  @override\n    skinColor() {\n      String color = 'black';\n      print(color);\n      return color;\n    }\n}\n\nclass WhitePeople extends People {\n@override\n  skinColor() {\n    String color = 'White';\n    print(color);\n    return color;\n  }\n}\n")),Object(a.b)("p",null,"下边是使用示例，及相应的输出结果。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"YellowPeople yellowPeople = YellowPeople();\nyellowPeople.ability();\nyellowPeople.skinColor();\n\nWhitePeople whitePeople = WhitePeople();\nwhitePeople.ability();\nwhitePeople.skinColor();\n\nBlackPeople blackPeople = BlackPeople();\nblackPeople.ability();\nblackPeople.skinColor();\n    \n// 输出结果：\nflutter: All can Communicate\nflutter: Yellow\nflutter: All can Communicate\nflutter: White\nflutter: All can Communicate\nflutter: black\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"抽象类不能创建实例。"),Object(a.b)("li",{parentName:"ul"},"抽象方法为没有方法体的方法。只有抽象类中可以写抽象方法，其他普通类不可以。\n* 例：如果BlackPeople的skinColor 没有方法体即没有实现，则会报错如下：'skinColor' must have a method body because 'BlackPeople' isn't abstract.\nTry making 'BlackPeople' abstract, or adding a body to 'skinColor'."),Object(a.b)("li",{parentName:"ul"},"继承了抽象类的子类必须实现抽象方法\n",Object(a.b)("em",{parentName:"li"}," 以WhitePeople 为例，如果不实现skinColor 方法会报出如下错误：\n"),"  Missing concrete implementation of People.skinColor.\n*  Try implementing the missing method, or make the class abstract. ")),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"5-override"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#5-override"}),"#"),"5. override"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},'"5.1 override 运算符"及override toString')),Object(a.b)("p",null,"这里笔者对override 运算符添加了引号。至于原因，等大家看完了下边的内容之后，便会了解笔者的用意。下文提到的override和重写是一个意思。"),Object(a.b)("p",null,"先看下运算符重写的示例代码："),Object(a.b)("p",null,"Vector 类，重写了+ 运算符和减运算符，以达到Vector可以直接进行加减的目的。笔者还重写了Vector类的toString 方法，便于查看Vector的x、y值。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"class Vector {\n  final int x;\n  final int y;\n  \n  const Vector(this.x, this.y);\n\n  Vector operator +(Vector v) {\n    return Vector(x + v.x, y + v.y);\n  }\n\n  Vector operator -(Vector v) {\n    return Vector(x - v.x, y - v.y);\n  }\n  \n  @override\n  String toString() {\n    return 'runtimeType：' + this.runtimeType.toString() + '，x：' + x.toString() +'，y：' + y.toString();\n  }\n  \n}\n")),Object(a.b)("p",null,"使用Vector的+、-运算符，及重写toString后，使用Vector的示例代码及输出结果如下："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"    Vector v1 = Vector(1, 1);\n    Vector v2 = Vector(2, 2);\n    Vector v3 = v1 + v2;\n    Vector v0 = v2 - v1;\n    print(v0);\n    print(v3);\n\n// 输出结果： \nflutter: runtimeType：Vector，x：1，y：1\nflutter: runtimeType：Vector，x：3，y：3\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"重写toString的效果是：可控制print的对象的内容及格式。"),"这一点便于非调试环境下查看一些具体错误信息。"),Object(a.b)("p",null,"上文笔者提到了重写运算符是加引号的原因如下：在笔者看来，运算符的重写有点跑题了。重写toString才算是重写。重写的toString的返回值、方法名和参数和父类Object都一样。如大家有不同理解，欢迎讨论。"),Object(a.b)("h4",null,Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"参考学习网址"})),Object(a.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#参考学习网址"}),"#"),"参考学习网址"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"http://dart.goodev.org/guides/language/language-tour#classes"}),"http://dart.goodev.org/guides/language/language-tour#classes")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://dart.dev/guides/language/language-tour#classes"}),"https://dart.dev/guides/language/language-tour#classes"))))}p.isMDXComponent=!0}}]);