(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{45:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",function(){return i}),n.d(a,"rightToc",function(){return m}),n.d(a,"default",function(){return g});n(0);var t=n(90);function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i={title:"Flutter组件之Image",author:"handoing",authorTitle:"A flutter fans",authorURL:"https://github.com/handoing",authorImageURL:"https://p5.ssl.qhimg.com/t01b6580ec3d65d7b7f.png",tags:["flutter","widget"]},m=[{value:"参考",id:"参考",children:[]}],s={rightToc:m},c="wrapper";function g(e){var a=e.components,n=l(e,["components"]);return Object(t.b)(c,r({},s,n,{components:a,mdxType:"MDXLayout"}),Object(t.b)("p",null,"在flutter中，我们可以通过Image Widget来展示我们的图片，\n以下是Image提供的几个构造方法，来为我们以不同方式加载图片。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Image：通过ImageProvider获取图像"),Object(t.b)("li",{parentName:"ul"},"Image.asset：通过AssetBundle获取图像"),Object(t.b)("li",{parentName:"ul"},"Image.network：通过URL获取图像，用于加载网络图片"),Object(t.b)("li",{parentName:"ul"},"Image.file：通过本地文件获取图像"),Object(t.b)("li",{parentName:"ul"},"Image.memory：通过Uint8List获取图像  ")),Object(t.b)("p",null,"目前支持的图片格式有JPEG, PNG, GIF, GIF, WebP, BMP, WBMP。"),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"1image"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#1image"}),"#"),"1.Image"),Object(t.b)("p",null,"我们先来看下Image的构造方法："),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"const Image({\n  Key key,\n  @required this.image, // ImageProvider, 下面会说明\n  this.semanticLabel, // 语义化标签\n  this.excludeFromSemantics = false, // 是否从语义描述中排除此图像\n  this.width, // 图片宽度\n  this.height, // 图片高度\n  this.color, // 混合颜色，如果设置了该值，则会使用colorBlendMode把该颜色与图像每个像素进行混合\n  this.colorBlendMode, // 与color配合使用，采用哪种混合模式\n  this.fit, // 以何种布局来展示图像\n  this.alignment = Alignment.center, // 对齐方式\n  this.repeat = ImageRepeat.noRepeat, // 重复绘制图像\n  this.centerSlice, // 可通过设置可水平和垂直拉伸的中心区域，来实现android中.9图像效果\n  this.matchTextDirection = false, // 是否按文本方向绘制图像\n  this.gaplessPlayback = false, // 当ImageProvider变化时，是否显示旧图像\n  this.filterQuality = FilterQuality.low, // 当使用maskFilter或者Canvas.drawImageRect等图像绘制时，用来对性能和图像质量做权衡\n})\n")),Object(t.b)("p",null,"例子："),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    ImageProvider _assetImageProvider = new AssetImage('assets/images/flutter-logo.png'); // 记得将资源路径加入pubspec.yaml\n    Image _image = new Image(\n      image: _assetImageProvider,\n      width: 200,\n    );\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Image\"),\n        ),\n        body: _image,\n      )\n    );\n  }\n}\n")),Object(t.b)("p",null,"如图:"),Object(t.b)("img",{src:"/blog-images/screenshot-flutter-Image.png",width:"300"}),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"2imageasset"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#2imageasset"}),"#"),"2.Image.asset"),Object(t.b)("p",null,"用于加载本地项目图片资源"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    Image _image = new Image.asset('assets/images/flutter-logo.png');\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Image\"),\n        ),\n        body: _image,\n      )\n    );\n  }\n}\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"3imagenetwork"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#3imagenetwork"}),"#"),"3.Image.network"),Object(t.b)("p",null,"用于加载网络图片资源"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    Image _image = new Image.network('http://xxx.com/xxx.png');\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Image\"),\n        ),\n        body: _image,\n      )\n    );\n  }\n}\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"4imagefile"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#4imagefile"}),"#"),"4.Image.file"),Object(t.b)("p",null,"用于加载设备本地图片资源"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    Image _image = new Image.file('/sdcard/xxx.png');\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Image\"),\n        ),\n        body: _image,\n      )\n    );\n  }\n}\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"5imagememory"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#5imagememory"}),"#"),"5.Image.memory"),Object(t.b)("p",null,"用于加载Uint8List数据"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    String imageBase64 = 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAQAAAD9CzEMAAACsElEQVR4Ae3W30tTYRjA8a9zO0sHoU0PirZ/QBIhNP07CsSLAnFodCsuLYQu+t2NqWlR3SpaCUkE/QtBYmYX5Y9qVlBq01k5d7NuHh4ObefHNgoEP+/d+zzv8+6873k448C+UEobF5nhLZukSbPJIk/o5wQ+ihbhFl/J2Iw1rlFHwUwekCbjMvYYJ0wBzpAg43Fs0E5eAjy0FiDJBFGaCWNgUEUzUSZJWnMYx49HIV5YFr6jkzJyKaeLJUvmM81zFLCU/00vfpfsPnYtW/hxpYfDexrwopFly0G5OK2pc1Tjlcm8rmt3Tkzor68mH6Y+xTpHsHVfkn7RQL4a9S7uYCOibdVLIWKyOmXX3Tf1xfQDAIcYI8k2owRRtrGAHtNVcvDxRcKdIMb06kZQDrGozMQpIUubBLcpQ1h6dQvlEAuxI3MtZLkgoQlQ21okgXKMTclcP1lmJBQFNapFhlCOsR6Ze0SWRQk1gwoywhYJhjBQjrFWqbJAlk0JhSmGqe2mhPaAQTGC+hn67xvoEVX9qyPSS6YYesnOr2mBnF/TAQlNgjiszeQ8fhACMS1z5+0fLkk5iEFPG8RAhPhpf9A+PkuwC4TBnGv5lwRAdMvcJ0rI4YaElyxLIsQdy3+gDoTBisxeIaej2gt9oCLM25Z/RX2OW0xRi427+nflGKggl/RsdZBkEANUEymJDGOrStttGROrSs4xS5w0aeLMcpYKrGpYlZXfqcRBh/7CeUy8quG1rjuFi3uaukwjXjSxav18uvHzXNN3iRHAicEAKc2fpRQPypEt5DmihMglRDcrlsynlOGRXw5KBjtM0UMrJkGCmLTSw/Rfb9YwpeSlgw0yHsc3TlKAMOPsuRZPcZsKClbPddZsi3/kMrUUzUcLAzzmDRvskWKdBaaJcZwSDuwDfwCocWGlJHBmcAAAAABJRU5ErkJggg==';\n    Uint8List bytes = base64Decode(imageBase64);\n    Image _image = new Image.memory(bytes);\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Image\"),\n        ),\n        body: _image,\n      )\n    );\n  }\n}\n")),Object(t.b)("p",null,"如图："),Object(t.b)("img",{src:"/blog-images/screenshot-flutter-Image.memory.png",width:"300"}),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"6imageprovide"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#6imageprovide"}),"#"),"6.ImageProvide"),Object(t.b)("p",null,"我们通过源码可以知道Image.asset、Image.network、Image.file、Image.memory内部也是通过ImageProvider来处理图像。"),Object(t.b)("p",null,"ImageProvider子类继承关系如下：\n",Object(t.b)("img",r({parentName:"p"},{src:"/blog-images/ImageProvider-extends.png",alt:"ImageProvider"}))),Object(t.b)("p",null,"拿Image.asset举例，以下两种方式是一样的"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"new Image.asset('assets/images/flutter-logo.png');\n// or\nnew Image(image: new AssetImage('assets/images/flutter-logo.png'));\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"7其他"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#7其他"}),"#"),"7.其他"),Object(t.b)("p",null,"大多数情况我们可能会用到占位图，在图片资源加载过程中展示一张占位图，这时候可以使用"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"new FadeInImage.assetNetwork(\n  placeholder: 'assets/images/default-img.png', // 本地占位图\n  image: 'http://xxx.com/xxx.png'\n);\n// or\nnew FadeInImage.memoryNetwork(\n  placeholder: kTransparentImage, // 透明占位图\n  image: 'http://xxx.com/xxx.png'\n)\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"注意"),"：无法设置当图片加载失败时显示的图片，我们可以通过自定义一个图片加载组件或使用第三方库提供的组件来解决。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"关于图片缓存"),"  "),Object(t.b)("p",null,"Image组件内部其实已经对图片资源进行了缓存处理，源码如下："),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 部分代码已省略\nclass ImageCache {\n  final Map<Object, _PendingImage> _pendingImages = <Object, _PendingImage>{};\n  final Map<Object, _CachedImage> _cache = <Object, _CachedImage>{};\n\n  ...\n\n  ImageStreamCompleter putIfAbsent(Object key, ImageStreamCompleter loader(), { ImageErrorListener onError }) {\n    ImageStreamCompleter result = _pendingImages[key]?.completer;\n    if (result != null)\n      return result;\n\n    final _CachedImage image = _cache.remove(key);\n    if (image != null) {\n      _cache[key] = image;\n      return image.completer;\n    }\n    try {\n      result = loader();\n    } catch (error, stackTrace) {\n      if (onError != null) {\n        onError(error, stackTrace);\n        return null;\n      } else {\n        rethrow;\n      }\n    }\n    void listener(ImageInfo info, bool syncCall) {\n      final int imageSize = info?.image == null ? 0 : info.image.height * info.image.width * 4;\n      final _CachedImage image = _CachedImage(result, imageSize);\n      if (maximumSizeBytes > 0 && imageSize > maximumSizeBytes) {\n        _maximumSizeBytes = imageSize + 1000;\n      }\n      _currentSizeBytes += imageSize;\n      final _PendingImage pendingImage = _pendingImages.remove(key);\n      if (pendingImage != null) {\n        pendingImage.removeListener();\n      }\n\n      _cache[key] = image;\n      _checkCacheSize();\n    }\n    if (maximumSize > 0 && maximumSizeBytes > 0) {\n      _pendingImages[key] = _PendingImage(result, listener);\n      result.addListener(listener);\n    }\n    return result;\n  }\n\n  ...\n\n}\n")),Object(t.b)("p",null,"通过源码可以看出Image内部是通过key来记录图片是否缓存，但是这样会存在一个问题，这种缓存机制是通过内存进行缓存，如果当前应用进程被杀死，再次进入应用后，网络图片资源还是会去重新加载。  "),Object(t.b)("p",null,"理论上我们可以通过自定义一个ImageProvide，将图片缓存到磁盘来进行优化。"),Object(t.b)("h3",null,Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"参考"})),Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#参考"}),"#"),"参考"),Object(t.b)("p",null,Object(t.b)("a",r({parentName:"p"},{href:"https://api.flutter.dev/flutter/widgets/Image-class.html"}),"https://api.flutter.dev/flutter/widgets/Image-class.html"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",r({parentName:"p"},{href:"https://api.flutter.dev/flutter/painting/ImageProvider-class.html"}),"https://api.flutter.dev/flutter/painting/ImageProvider-class.html"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",r({parentName:"p"},{href:"https://flutter.dev/docs/cookbook/images/fading-in-images"}),"https://flutter.dev/docs/cookbook/images/fading-in-images")))}g.isMDXComponent=!0}}]);