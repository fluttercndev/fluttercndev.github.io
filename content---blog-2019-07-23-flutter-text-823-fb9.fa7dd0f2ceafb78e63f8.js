(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{49:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",function(){return i}),n.d(e,"rightToc",function(){return o}),n.d(e,"default",function(){return x});n(0);var l=n(93);function a(){return(a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(t[l]=n[l])}return t}).apply(this,arguments)}function r(t,e){if(null==t)return{};var n,l,a=function(t,e){if(null==t)return{};var n,l,a={},r=Object.keys(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i={title:"Flutter组件之Text",author:"handoing",authorTitle:"A flutter fans",authorURL:"https://github.com/handoing",authorImageURL:"https://p5.ssl.qhimg.com/t01b6580ec3d65d7b7f.png",tags:["flutter","widget"]},o=[],c={rightToc:o},s="wrapper";function x(t){var e=t.components,n=r(t,["components"]);return Object(l.b)(s,a({},c,n,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"flutter环境"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#flutter环境"}),"#"),"Flutter环境"),Object(l.b)("p",null,"Flutter version 1.7.8+hotfix.3",Object(l.b)("br",{parentName:"p"}),"\n","Dart version 2.4.0"),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"1textstyle"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#1textstyle"}),"#"),"1.TextStyle"),Object(l.b)("p",null,"TextStyle，主要用来设置文本相关样式时使用，我们先来看下TextStyle各属性的解释。"),Object(l.b)("p",null,"如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"const TextStyle({\n  this.inherit = true, // 是否继承父组件样式\n  this.color, // 文本颜色\n  this.backgroundColor, // 文本背景颜色\n  this.fontSize, // 字体大小\n  this.fontWeight, // 字体粗度\n  this.fontStyle, // 文本形式（斜体）\n  this.letterSpacing, // 文本颜色\n  this.wordSpacing, // 字母间距\n  this.textBaseline, // 单词间距\n  this.height, // 行高\n  this.locale, // 用于选择区域特定符号的区域设置\n  this.foreground, // 设置Paint来作为文本前景绘制\n  this.background, // 设置Paint来作为文本背景绘制\n  this.shadows, // 文本阴影\n  this.fontFeatures, // 详见FontFeature\n  this.decoration, // 文本修饰（下划线、删除线等）\n  this.decorationColor, // 文本修饰的颜色\n  this.decorationStyle, // 文本修饰的样式\n  this.decorationThickness, // 文本修饰粗细\n  this.debugLabel, // 文本样式描述，仅在调试中用到\n  String fontFamily, // 设置字体\n  List<String> fontFamilyFallback, // 当无法找到设置字体则从Fallback里按列表顺序依次设置兜底字体\n  String package, // 引入库字体时用到\n})\n")),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"2text"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#2text"}),"#"),"2.Text"),Object(l.b)("p",null,"Text允许文字以单一样式来展示，会根据布局的约束来判断是多行展示还是单行展示。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"Text(\n    String data, \n    { \n        Key key, \n        TextStyle style, // TextStyle可设置文字颜色、大小、间隙等\n        StrutStyle strutStyle, // 支柱样式\n        TextAlign textAlign, // 文本对齐方式\n        TextDirection textDirection, // 文本排列方向\n        Locale locale, // 设置特定字体语言环境\n        bool softWrap, // 文字超出容器大小是否换行\n        TextOverflow overflow, // 文本溢出的处理方式\n        double textScaleFactor, // 每个逻辑像素的字体像素数\n        int maxLines, // 文字最大行数\n        String semanticsLabel, // 语义标签\n        TextWidthBasis textWidthBasis // 考虑单行或多行文本不同宽度的使用方式\n    }\n)\n\n// 使用\nclass MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    Widget text = Text('Hello World!',\n        style: TextStyle(\n          color: Colors.black,\n          fontSize: 24,\n        ),\n        textAlign: TextAlign.center,\n        overflow: TextOverflow.ellipsis\n    );\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Text\"),\n        ),\n        body: text,\n      )\n    );\n  }\n}\n")),Object(l.b)("p",null,"如图:\n",Object(l.b)("img",a({parentName:"p"},{src:"/blog-images/screenshot-flutter-Text.png",alt:"Text widget"}))),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"3textrich和textspan"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#3textrich和textspan"}),"#"),"3.Text.rich和TextSpan"),Object(l.b)("p",null,"如果我们需要多样式的文字展示应该怎么办呢？我们可以指定text.rich, 使用TextSpan设置文字不同样式。"),Object(l.b)("p",null,"这里要注意的是TextSpan并不是一个Widget，TextSpan只能依赖于特定文本组件使用。\n并且我们可以通过继承结构看出Text继承自Widget，而TextSpan则直接继承自DiagnosticableTree。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    Widget text = Text.rich(\n      TextSpan(\n        text: 'Hello',\n        style: TextStyle(\n          color: Colors.black,\n          fontSize: 24\n        ),\n        children: <TextSpan>[\n          TextSpan(text: ' beautiful ', style: TextStyle(fontStyle: FontStyle.italic)),\n          TextSpan(text: 'world', style: TextStyle(fontWeight: FontWeight.bold)),\n        ],\n      ),\n    );\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Text\"),\n        ),\n        body: text,\n      )\n    );\n  }\n}\n")),Object(l.b)("p",null,"如图:\n",Object(l.b)("img",a({parentName:"p"},{src:"/blog-images/screenshot-flutter-Text.rich.png",alt:"Text.rich widget"}))),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"4richtext"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#4richtext"}),"#"),"4.RichText"),Object(l.b)("p",null,"Text和Text.rich其实就是对RichText更上一层的封装，我们通过Text源码可以看出其build方法返回的其实就是RichText组件。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"@override\nWidget build(BuildContext context) {\n  ...\n  Widget result = RichText(\n    textAlign: textAlign ?? defaultTextStyle.textAlign ?? TextAlign.start,\n    textDirection: textDirection,\n    locale: locale,\n    softWrap: softWrap ?? defaultTextStyle.softWrap,\n    overflow: overflow ?? defaultTextStyle.overflow,\n    textScaleFactor: textScaleFactor ?? MediaQuery.textScaleFactorOf(context),\n    maxLines: maxLines ?? defaultTextStyle.maxLines,\n    strutStyle: strutStyle,\n    textWidthBasis: textWidthBasis ?? defaultTextStyle.textWidthBasis,\n    text: TextSpan(\n      style: effectiveTextStyle,\n      text: data,\n      children: textSpan != null ? <TextSpan>[textSpan] : null,\n    ),\n  );\n  ...\n  return result;\n}\n")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"// 与Text.rich用法类似\nclass MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    Widget text = RichText(\n      text: TextSpan(\n        text: 'Hello',\n        style: TextStyle(\n            color: Colors.black,\n            fontSize: 24\n        ),\n        children: <TextSpan>[\n          TextSpan(text: ' beautiful ', style: TextStyle(fontStyle: FontStyle.italic)),\n          TextSpan(text: 'world', style: TextStyle(fontWeight: FontWeight.bold)),\n        ],\n      )\n    );\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Text\"),\n        ),\n        body: text,\n      )\n    );\n  }\n}\n")),Object(l.b)("p",null,"如图:\n",Object(l.b)("img",a({parentName:"p"},{src:"/blog-images/screenshot-flutter-RichText.png",alt:"RichText widget"}))),Object(l.b)("h4",null,Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"5defaulttextstyle"})),Object(l.b)("a",a({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#5defaulttextstyle"}),"#"),"5.DefaultTextStyle"),Object(l.b)("p",null,"我们可以通过DefaultTextStyle组件来设置文本默认样式，DefaultTextStyle目的是为其子元素设置统一样式，使用如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"DefaultTextStyle(\n    style: TextStyle(\n        fontSize: 16,\n        color: Colors.black,\n    ),\n    child: Container(\n    child: Column(\n        children: <Widget>[\n            Text(\n                'hello 1',\n            ),\n            Text(\n                'hello 2',\n            ),\n        ],\n    ),\n));\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"注意"),"：文本样式默认是会被继承，如果我们不想继承父级样式，可以通过设置TextStyle的inherit为false即可，如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"class MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    Widget text = DefaultTextStyle(\n        style: TextStyle(\n          fontSize: 24,\n          fontWeight: FontWeight.bold,\n          color: Colors.black,\n        ),\n        child: Container(\n          child: Column(\n            children: <Widget>[\n              Text(\n                'hello flutter',\n              ),\n              Text(\n                'hello flutter',\n                style: TextStyle(\n                    inherit: false,\n                    color: Colors.red\n                ),\n              ),\n            ],\n          ),\n        )\n    );\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text(\"Flutter Text\"),\n        ),\n        body: text,\n      )\n    );\n  }\n}\n")),Object(l.b)("p",null,"如图:\n",Object(l.b)("img",a({parentName:"p"},{src:"/blog-images/screenshot-flutter-DefaultTextStyle.png",alt:"DefaultTextStyle widget"}))))}x.isMDXComponent=!0}}]);