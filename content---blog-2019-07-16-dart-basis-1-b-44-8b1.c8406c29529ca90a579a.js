(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{36:function(n,e,a){"use strict";a.r(e),a.d(e,"frontMatter",function(){return l}),a.d(e,"rightToc",function(){return b}),a.d(e,"default",function(){return s});a(0);var t=a(66);function r(){return(r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n}).apply(this,arguments)}function i(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},i=Object.keys(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var l={title:"Dart 基础一 (转载)",author:"Yan",authorTitle:"A flutter fans",authorURL:"https://github.com/endiliey",authorImageURL:"https://p5.ssl.qhimg.com/t01b6580ec3d65d7b7f.png",tags:["dart","basic"]},b=[{value:"Flutter 、Dart简介",id:"flutter-、dart简介",children:[]},{value:"安装 Dart",id:"安装-dart",children:[]},{value:"在线演示Dart运行效果",id:"在线演示dart运行效果",children:[{value:"Dart导入头文件（资源库）的方式",id:"dart导入头文件（资源库）的方式",children:[]},{value:"Dart基本语法",id:"dart基本语法",children:[]},{value:"参考学习资料",id:"参考学习资料",children:[]}]}],c={rightToc:b},p="wrapper";function s(n){var e=n.components,a=i(n,["components"]);return Object(t.b)(p,r({},c,a,{components:e,mdxType:"MDXLayout"}),Object(t.b)("p",null,"前言：\n笔者最近看了Flutter相关的内容，而Flutter的基础库是由Dart编写的，所以笔者学习了关于Dart的部分内容，整理了几篇关于Dart基础的文章。"),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"flutter-、dart简介"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#flutter-、dart简介"}),"#"),"Flutter 、Dart简介"),Object(t.b)("p",null,"Flutter is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktopfrom a single codebase. （引自Flutter.dev）"),Object(t.b)("p",null,"Flutter 是谷歌的便携式UI工具包，可以使用一套代码库，来创建漂亮的本地编译的移动端（iOS、Android）应用，web（浏览器中的页面）、桌面（Mac、Windows、Linux）应用。\nFlutter 当前最新稳定版本是1.5。"),Object(t.b)("p",null,"Dart（","[KK]"," 英语发音：/dɑrt/, ","[DJ]"," 英语发音：/dɑ:t/）是一种适用于万维网的开放源代码编程语言，由Google主导开发，于2011年10月公开。它的开发团队由Google Chrome浏览器V8引擎团队的领导者拉尔斯·巴克主持，目标在于成为下一代结构化Web开发语言。\n类似JavaScript，Dart也是一种面向对象语言，但是它采用基于类编程。它只允许单一继承，语法风格接近C语言。"),Object(t.b)("p",null,"Dart is a client-optimized language for fast apps on any platform\nDart是客户端的优化过的语言，可用于在任何平台（包括移动端（iOS、Android）、Web页面、桌面（Mac、Windows、Linux）应用），来创建运行流畅的应用。"),Object(t.b)("p",null,"当前Dart最新版本是2.4.0，2019-06-27 Dart开发团队发布2.4.0版本Dart。 Dart change log"),Object(t.b)("p",null,"下边，我们聊一下，关于Dart安装，及查看代码运行效果的内容"),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"安装-dart"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#安装-dart"}),"#"),"安装 Dart"),Object(t.b)("p",null,"Dart 安装方式可查看：",Object(t.b)("a",r({parentName:"p"},{href:"http://dart.goodev.org/install"}),"dart.goodev.org/install"),Object(t.b)("br",{parentName:"p"}),"\n","在 Mac 安装 Dart 可查看 ： ",Object(t.b)("a",r({parentName:"p"},{href:"http://dart.goodev.org/install/mac"}),"dart.goodev.org/install/mac")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"在线演示dart运行效果"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#在线演示dart运行效果"}),"#"),"在线演示Dart运行效果"),Object(t.b)("p",null,"DartPad：Dart 在线演示：dartpad.dartlang.org"),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"DartPad, an open-source tool, allows you to play with the Dart language features in any modern browser."),Object(t.b)("p",{parentName:"blockquote"},"DartPad 是一个开源工具，我们可以在现代浏览器中使用DartPad来演示Dart语言特性。\n笔者的理解就是，我们可以用DartPad在线查看Dart编程效果。")),Object(t.b)("p",null,"下边我们聊一下，Dart的基础语法相关的内容。"),Object(t.b)("h3",null,Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"dart导入头文件（资源库）的方式"})),Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#dart导入头文件（资源库）的方式"}),"#"),"Dart导入头文件（资源库）的方式"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"// dart:io 为非Web应用提供文件，Socket,HTTP，和其他IO支持。\nimport 'dart:io';\n\n// 导入Android设计风格的material库\nimport 'package:flutter/material.dart';\n\n// 导入iOS 的设计风格cupertino库\nimport 'package:flutter/cupertino.dart';\n\n// 只导入material库中的AppBar\nimport 'package:flutter/material.dart' show AppBar;\n\n// 导入除了material库中 除BottomNavigationBar之外 的内容\nimport 'package:flutter/material.dart' hide BottomNavigationBar;\n")),Object(t.b)("h3",null,Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"dart基本语法"})),Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#dart基本语法"}),"#"),"Dart基本语法"),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"输出语句"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#输出语句"}),"#"),"输出语句"),Object(t.b)("p",null,"一般我们开始学习某门语言的时候都会先输出，Hello World！或者是Hello 语言名。\nDart的输出语句和Swift一样，都是print。Dart的语句需要使用分号结尾。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"main(){\n  print('Hello World!');\n  print('Hello Dart!');\n}\n\n// 输出结果：\n/**\n\nHello World!\nHello Dart!\n\n*/\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"变量"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#变量"}),"#"),"变量"),Object(t.b)("p",null,"定义变量使用 关键字var;",Object(t.b)("br",{parentName:"p"}),"\n","如定义变量名为name，值为QiShare的变量。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  var name = 'QiShare';\n  print(name);\n\n// 输出结果：\n//  QiShare\n")),Object(t.b)("p",null,"Dart变量默认值为null"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  int fansCount;\n  //   String fansCount;\n  if (fansCount == null) {\n    print('null');\n  } else {\n    print('not null fansCount ${fansCount}');\n  }\n\n// 输出结果：\n  /**\n  null\n  */\n  \n")),Object(t.b)("p",null,"输出变量，需要拼接字符串和变量一起输出的情况下，所有的内容都使用''包起来",Object(t.b)("br",{parentName:"p"}),"\n","${变量} 可以用于访问相应的变量的值。"),Object(t.b)("h5",null,Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"取变量值是否使用-分情况："})),Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#取变量值是否使用-分情况："}),"#"),"取变量值是否使用{} 分情况："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"直接访问实例的情况 直接使用 $实例 即可；  "),Object(t.b)("li",{parentName:"ol"},"访问实例的成员变量的情况 需要使用 ${实例.变量} ；  "),Object(t.b)("li",{parentName:"ol"},"只是单纯输出实例或者是实例的成员变量的情况，不需要使用$。")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"字符串"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#字符串"}),"#"),"字符串"),Object(t.b)("p",null,"字符串拼接及多行字符串"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"    // 字符串拼接\n    var name = 'QiShare' + 'QiShare';\n    print(name);\n  \n    // 输出结果：\n    // QiShareQiShare\n  \n    // 多行字符串\n    var name = '''\n    QiShare\n    QiShare\n    QiShare\n  ''';\n  print(name);\n  \n  // 输出结果：\n  /**\n  QiShare\n  QiShare\n  QiShare\n  */\n")),Object(t.b)("p",null,"关于变量是否对外可访问，在iOS Objective-C里边，如果我们想类文件A的某个变量对外可见，可以在类A.h文件里边把变量声明为属性。然后只要引用了A.h的类，就能够访问A.h中声明的属性。",Object(t.b)("br",{parentName:"p"}),"\n","在Dart中，如果要指定某个变量对外可访问，可以在类文件的顶部声明变量。"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"如果想要指定某个类的实例变量对外可访问，直接写在类声明的内部即可。并且变量不要使用下划线开头。  "),Object(t.b)("li",{parentName:"ol"},"对于私有的变量，或者方法，使用下划线 “_” 在变量、方法前，则该变量、方法将分别为私有变量、私有方法。  "),Object(t.b)("li",{parentName:"ol"},"对于其他的多个常量，整个项目中使用的情况，可以单独创建一个类文件用于存放公共的常量。")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"变量类型检查及值检查"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#变量类型检查及值检查"}),"#"),"变量类型检查及值检查"),Object(t.b)("p",null,"开发过程中，在对服务端下发的数据，进行处理的时候，有时需要进行变量类型判断，值的检测。可以参考如下的2种检测方式。",Object(t.b)("br",{parentName:"p"}),"\n","一个是变量类型检查，使用runtimeType或者使用关键字is进行类型检测；另一个是变量的值的检查。"),Object(t.b)("h5",null,Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"变量类型检查"})),Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#变量类型检查"}),"#"),"变量类型检查"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  // runtimeType是用于查看变量类型的。\n  // 可以使用runtimeType或is查看变量是什么类型\n  \n  String QiShare = 'QiShare';\n  if (QiShare.runtimeType == String) {\n    print(QiShare);\n    print('name:${QiShare}');\n  }\n  \n\n/**\nQiShare\nname:QiShare\n*/\n\n\n// 使用is 查看变量的类型\nString QiShare = 'QiShare';\n  if (QiShare is String) {\n    print('是String类型 ：');\n    print(QiShare);\n  } else {\n    print('非String类型');\n  }\n/* 输出结果：\n是String类型 ： QiShare\n*/\n")),Object(t.b)("h5",null,Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"anchor",id:"变量的值的检查。"})),Object(t.b)("a",r({parentName:"h5"},{"aria-hidden":!0,className:"hash-link",href:"#变量的值的检查。"}),"#"),"变量的值的检查。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"// Check for an empty string.\nvar fullName = '';\nif (fullName.isEmpty) {\n  print('空字符串');\n}\n\n// Check for zero.\nvar hitPoints = 0;\nassert(hitPoints <= 0);\nif(hitPoints <= 0) {\n    print('hitPoints小于等于0');\n}\n\n// Check for null.\nvar unicorn;\nif (unicorn == null) {\n    print(null);\n}\n\n// Check for NaN. The global NaN property is a value representing Not-A-Number.\nvar iMeantToDoThis = 0 / 0;\nif (iMeantToDoThis.isNaN) {\n    print('Not a number');\n}\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"类型推导"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#类型推导"}),"#"),"类型推导"),Object(t.b)("p",null,"使用var 声明的变量，通过输出变量的runtimeType ，可以发现变量的类型可以通过赋给变量的值，自动进行类型推导。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  var name = 'QiShare';\n  if (name == null) {\n    print('null');\n  } else {\n    print(name);\n    print(name.runtimeType);\n  }\n  \n  \n/**\n\nQiShare\nString\n\n*/\n\n  var name = 10.0;\n  if (name == null) {\n    print('null');\n  } else {\n    print(name);\n    print(name.runtimeType);\n  }\n  name = 10.1;\n  \n  if (name == null) {\n    print('null');\n  } else {\n    print(name);\n    print(name.runtimeType);\n  }\n  \n  /**\n    10\n    int\n    10.1\n    double\n  */\n\n/*\n上边的例子很有意思，推导出的10.0的类型为int;\n推导出的10.1的类型为double。\n笔者认为是编译器做了优化，具体怎么做的，笔者尚不清楚。\n*/\n")),Object(t.b)("p",null,"当然除了类型推导知道变量的类型外，对于我们自己声明的变量，在已经确定变量类型的情况下，直接直观地声明变量类型即可。",Object(t.b)("br",{parentName:"p"}),"\n","那么对于var 这种变量的使用场景，笔者想到的有如下2种情况。"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"接收服务端返回数据的时候，避免返回的数据类型和预期的有差异的情况，可以使用var 变量接收，然后通过类型检测后，再进一步进行数据地处理；  "),Object(t.b)("li",{parentName:"ol"},"对于某些函数接收的参数可能是多种类型的情况下，使用var 来修饰参数类型。")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"final-and-const"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#final-and-const"}),"#"),"Final and const"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"final 声明的变量只能赋值一次\nfinal name = 'QiShare';\n// name = 'QiShareQiShare';\n// 报错：\nconst 是编译时常量\nconst name = 'QiShare'\n复制代码final 或const修饰的变量只能赋值一次；\nconst 变量是编译时常量，在编译的时候，我们就已经知道了const 变量的值。\n顶级的final 变量或类中的final变量在第一次使用的时候初始化。\n这里举一个类中final变量初始化的例子：\nclass QiShareMember {\n  final String memberID;\n  final String memberName;\n  QiShareMember(this.memberID, this.memberName);\n}\n\n// QiShareMember初始化实例\nQiShareMember member = QiShareMember('id', 'name');\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"list和map"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#list和map"}),"#"),"List和Map"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"  var list = ['a', 'b', 1];\n\n  // 遍历list\n  list.forEach( (object){\n     print('类型 ${object.runtimeType}');\n     print('值${object}');\n   }\n  );\n\n  // list 中的数据\n  print(list.length);\n              \n/**\n              \nCONSOLE\n类型 String\n值a\n类型 String\n值b\n类型 int\n值1\n*/\n\n\n\nvoid main() {\n  var gifts = {\n// Keys      Values\n  'first' : 'partridge',\n  'second': 'turtledoves',\n  'fifth' : 'golden rings'\n};\n  \n  print(gifts);\n  // 获取Map中的键值对数目\n  print(gifts.length);\n  \n  // 遍历字典\n  gifts.forEach(\n    (key, value){\n      print('key:${key}');\n      print('value:${value}');\n    }\n  );\n  \n  /**\n  \nCONSOLE\n{first: partridge, second: turtledoves, fifth: golden rings}\nkey:first\nvalue:partridge\nkey:second\nvalue:turtledoves\nkey:fifth\nvalue:golden rings\n\n  */\n")),Object(t.b)("p",null,"List相当于是Swift的数组；List的使用场景有：用于放置UI层面的列表数据宽泛内容；\nMap相当于Swift的字典；Map的使用场景有：用于放置UI层面的列表数据中更具体内容；"),Object(t.b)("p",null,"举个例子：比如说 如下的数据，根据List中的字典的个数可以确定，UI层面上，需要展示5个人的信息；\n进一步根据List中，每一个字典中的name，和avatarUrl 可以确定更加细致的UI层面，每个人的个人信息的名字（name的值）和头像（avatarUrl 对应的图片）应该显示什么。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"[\n  {'name':'QiShare1',\n  'avatarUrl':'https://www.so.com....jpg'\n},\n \n  {\n  'name':'QiShare2',\n  'avatarUrl':'https://www.so.com....jpg'\n},\n\n {\n  'name':'QiShare3',\n  'avatarUrl':'https://www.so.com....jpg'\n},\n\n {\n  'name':'QiShare4',\n  'avatarUrl':'https://www.so.com....jpg'\n},\n\n {\n  'name':'QiShare5',\n  'avatarUrl':'https://www.so.com....jpg'\n}\n\n\n];\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"数据类型转换"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#数据类型转换"}),"#"),"数据类型转换"),Object(t.b)("p",null,"下边是字符串和整数，浮点数之间的类型转换。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"})," // String -> int String 类型转换为int 类型\nvar one = int.parse('1');\n print(one.runtimeType);\n\n// String -> double String 类型转为double类型\nvar onePointOne = double.parse('1.1');\n  print(onePointOne.runtimeType);\n\n// int -> String int 类型转换为String\nString oneAsString = 1.toString();\nprint(oneAsString.runtimeType);\n\n// double -> String double类型转换为String类型\nString piAsString = 3.14159.toStringAsFixed(2);\nprint(piAsString.runtimeType);\n\n/**\n\nint\ndouble\nString\nString\n*/\n\n\n// List类型转换 把子类型为dynamic的List转换为更为具体的子类型为String的List\n\n  List<dynamic> dynmicList = ['QiShare', 'QiShare'];\n  print(dynmicList.runtimeType);\n  \n  List<String>strList = List<String>.from(dynmicList);\n  print(strList);\n  print(strList.runtimeType);\n  \n\n  /**\n  \nJSArray\n[1, 2]\nJSArray<String>\n  */\n")),Object(t.b)("h4",null,Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"方法"})),Object(t.b)("a",r({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#方法"}),"#"),"方法"),Object(t.b)("p",null,"下边笔者举了一个说出QiShare 年龄的方法。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"})," int qiAgeNum = qiAgeNumber();\n qiSay('${words()} ${qiAgeNum}');\n\n// 返回值为String类型，参数为空，名为words方法。\nString words(){\n  return 'QiShare Age:';\n}\n\n// 返回值为空类型，参数为String，名为qiSay的方法。\nvoid qiSay(String words) {\n  print(words);\n}\n\n// 返回值为空，参数为空的，名为qiSay方法。\nvoid qiAge() {\n  print(qiAgeNumber());\n}\n\n// 返回值为int，参数为空，名为qiAgeNumber 的方法。\nint qiAgeNumber (){\n  return 1;\n}\n\n/**\n\n// 输出结果\nQiShare Age: 1\n\n*/\n")),Object(t.b)("h3",null,Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"参考学习资料"})),Object(t.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#参考学习资料"}),"#"),"参考学习资料"),Object(t.b)("p",null,Object(t.b)("a",r({parentName:"p"},{href:"http://dart.goodev.org/guides/language/language-tour"}),"Dart 语法预览"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",r({parentName:"p"},{href:"https://dartpad.dartlang.org/"}),"DartPad"),Object(t.b)("br",{parentName:"p"}),"\n",Object(t.b)("a",r({parentName:"p"},{href:"https://zh.wikipedia.org/wiki/Dart"}),"Dart")),Object(t.b)("p",null,"作者：QiShare",Object(t.b)("br",{parentName:"p"}),"\n","链接：",Object(t.b)("a",r({parentName:"p"},{href:"https://juejin.im/post/5d1dc797e51d4550723b1455"}),"https://juejin.im/post/5d1dc797e51d4550723b1455"),Object(t.b)("br",{parentName:"p"}),"\n","来源：掘金"))}s.isMDXComponent=!0}}]);